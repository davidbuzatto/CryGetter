/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package crygetter.gui;

import crygetter.model.CryToxin;
import crygetter.utils.Utils;
import java.awt.Color;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author David
 */
public class AlignDialog extends javax.swing.JDialog {

    private DefaultTableModel proteinTableModel;
    private Properties defaultConfigs;
    private Properties configs;
    
    /**
     * Creates new form AlignDialog
     */
    public AlignDialog( java.awt.Frame parent, boolean modal, List<CryToxin> ctList, Properties defaultConfigs, Properties configs ) {
        
        super( parent, modal );
        initComponents();
        
        this.defaultConfigs = defaultConfigs;
        this.configs = configs;
        
        proteinTableModel = new CryToxinTableModel(
                new String[]{ "Proteína", "Ordem(ns)", "Alinhar" }, 0 );
        
        for ( CryToxin ct : ctList ) {
            proteinTableModel.addRow( new Object[]{ ct, ct.proteinClass, false } );
        }
        
        tabelaProteinas.setModel( proteinTableModel );
        tabelaProteinas.getColumnModel().getColumn( 0 ).setCellRenderer( new CryToxinTableCellRender() );
        tabelaProteinas.getColumnModel().getColumn( 1 ).setCellRenderer( new CryToxinTableCellRender() );
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpAlgoritmoAlinhamento = new javax.swing.ButtonGroup();
        btnGrpTipoAlinhamento = new javax.swing.ButtonGroup();
        painel = new javax.swing.JPanel();
        spProteinas = new javax.swing.JScrollPane();
        tabelaProteinas = new javax.swing.JTable();
        btnSelecionarTodas = new javax.swing.JButton();
        btnLimparSelecao = new javax.swing.JButton();
        painelSelecoes = new javax.swing.JPanel();
        btnCOL = new javax.swing.JButton();
        btnLEP = new javax.swing.JButton();
        btnDIP = new javax.swing.JButton();
        btnHEM = new javax.swing.JButton();
        btnHYM = new javax.swing.JButton();
        btnISO = new javax.swing.JButton();
        btnNEU = new javax.swing.JButton();
        btnORT = new javax.swing.JButton();
        btnBLA = new javax.swing.JButton();
        btnTHY = new javax.swing.JButton();
        btnTRI = new javax.swing.JButton();
        painelAlinhamento = new javax.swing.JPanel();
        radioProtInteira = new javax.swing.JRadioButton();
        radioPorDominio = new javax.swing.JRadioButton();
        checkD1 = new javax.swing.JCheckBox();
        checkD2 = new javax.swing.JCheckBox();
        checkD3 = new javax.swing.JCheckBox();
        checkFront = new javax.swing.JCheckBox();
        painelAlgoritmos = new javax.swing.JPanel();
        radioClustalO = new javax.swing.JRadioButton();
        radioClustalW = new javax.swing.JRadioButton();
        radioMUSCLE = new javax.swing.JRadioButton();
        btnConf = new javax.swing.JButton();
        btnAlinhar = new javax.swing.JButton();
        lblAguarde = new javax.swing.JLabel();
        painelSaida = new javax.swing.JPanel();
        spSaida = new javax.swing.JScrollPane();
        areaSaida = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alinhamento de Proteínas");
        setResizable(false);

        painel.setBorder(javax.swing.BorderFactory.createTitledBorder("Proteínas"));

        tabelaProteinas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        spProteinas.setViewportView(tabelaProteinas);

        btnSelecionarTodas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/add.png"))); // NOI18N
        btnSelecionarTodas.setText("Selecionar Todas");
        btnSelecionarTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarTodasActionPerformed(evt);
            }
        });

        btnLimparSelecao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/delete.png"))); // NOI18N
        btnLimparSelecao.setText("Limpar Seleção");
        btnLimparSelecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparSelecaoActionPerformed(evt);
            }
        });

        painelSelecoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleção por Ordem"));

        btnCOL.setText("COL");

        btnLEP.setText("LEP");

        btnDIP.setText("DIP");

        btnHEM.setText("HEM");

        btnHYM.setText("HYM");

        btnISO.setText("ISO");

        btnNEU.setText("NEU");

        btnORT.setText("ORT");

        btnBLA.setText("BLA");

        btnTHY.setText("THY");

        btnTRI.setText("TRI");

        javax.swing.GroupLayout painelSelecoesLayout = new javax.swing.GroupLayout(painelSelecoes);
        painelSelecoes.setLayout(painelSelecoesLayout);
        painelSelecoesLayout.setHorizontalGroup(
            painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSelecoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnCOL)
                    .addComponent(btnNEU))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnLEP)
                    .addComponent(btnORT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnDIP)
                    .addComponent(btnBLA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnHEM)
                    .addComponent(btnTHY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnHYM)
                    .addComponent(btnTRI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnISO)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelSelecoesLayout.setVerticalGroup(
            painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSelecoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCOL)
                    .addComponent(btnLEP)
                    .addComponent(btnDIP)
                    .addComponent(btnHEM)
                    .addComponent(btnHYM)
                    .addComponent(btnISO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSelecoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNEU)
                    .addComponent(btnORT)
                    .addComponent(btnBLA)
                    .addComponent(btnTHY)
                    .addComponent(btnTRI))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelAlinhamento.setBorder(javax.swing.BorderFactory.createTitledBorder("O que alinhar?"));

        btnGrpTipoAlinhamento.add(radioProtInteira);
        radioProtInteira.setSelected(true);
        radioProtInteira.setText("Proteína Completa");
        radioProtInteira.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioProtInteiraActionPerformed(evt);
            }
        });

        btnGrpTipoAlinhamento.add(radioPorDominio);
        radioPorDominio.setText("Por Domínios");
        radioPorDominio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPorDominioActionPerformed(evt);
            }
        });

        checkD1.setText("Domínio 1");
        checkD1.setEnabled(false);

        checkD2.setText("Domínio 2");
        checkD2.setEnabled(false);

        checkD3.setText("Domínio 3");
        checkD3.setEnabled(false);

        checkFront.setText("Remover Fronteiras");
        checkFront.setEnabled(false);

        javax.swing.GroupLayout painelAlinhamentoLayout = new javax.swing.GroupLayout(painelAlinhamento);
        painelAlinhamento.setLayout(painelAlinhamentoLayout);
        painelAlinhamentoLayout.setHorizontalGroup(
            painelAlinhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlinhamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioProtInteira)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelAlinhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioPorDominio)
                    .addGroup(painelAlinhamentoLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(painelAlinhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkD2)
                            .addComponent(checkD1)
                            .addComponent(checkD3)
                            .addComponent(checkFront))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelAlinhamentoLayout.setVerticalGroup(
            painelAlinhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlinhamentoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelAlinhamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAlinhamentoLayout.createSequentialGroup()
                        .addComponent(radioPorDominio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkD1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkD2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkD3))
                    .addComponent(radioProtInteira))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkFront))
        );

        painelAlgoritmos.setBorder(javax.swing.BorderFactory.createTitledBorder("Algoritmos de Alinhamento Múltiplo (MSA)"));

        btnGrpAlgoritmoAlinhamento.add(radioClustalO);
        radioClustalO.setSelected(true);
        radioClustalO.setText("Clustal Ômega");

        btnGrpAlgoritmoAlinhamento.add(radioClustalW);
        radioClustalW.setText("ClustalW");

        btnGrpAlgoritmoAlinhamento.add(radioMUSCLE);
        radioMUSCLE.setText("MUSCLE");

        btnConf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/wrench.png"))); // NOI18N
        btnConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelAlgoritmosLayout = new javax.swing.GroupLayout(painelAlgoritmos);
        painelAlgoritmos.setLayout(painelAlgoritmosLayout);
        painelAlgoritmosLayout.setHorizontalGroup(
            painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlgoritmosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioClustalO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioClustalW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioMUSCLE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConf)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelAlgoritmosLayout.setVerticalGroup(
            painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlgoritmosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnConf)
                    .addComponent(radioClustalO)
                    .addComponent(radioClustalW)
                    .addComponent(radioMUSCLE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAlinhar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/accept.png"))); // NOI18N
        btnAlinhar.setText("Alinhar");
        btnAlinhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlinharActionPerformed(evt);
            }
        });

        lblAguarde.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAguarde.setForeground(new java.awt.Color(0, 102, 255));
        lblAguarde.setText(" ");

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spProteinas, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addComponent(btnSelecionarTodas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimparSelecao))
                    .addComponent(painelAlgoritmos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelAlinhamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelSelecoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addComponent(btnAlinhar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAguarde, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spProteinas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelLayout.createSequentialGroup()
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSelecionarTodas)
                            .addComponent(btnLimparSelecao))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelSelecoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelAlinhamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelAlgoritmos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAlinhar)
                            .addComponent(lblAguarde))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelSaida.setBorder(javax.swing.BorderFactory.createTitledBorder("Saída dos Processos dos Algoritmos de Alinhamento Múltiplo"));

        areaSaida.setFont(new java.awt.Font("Courier New", 1, 13)); // NOI18N
        spSaida.setViewportView(areaSaida);

        javax.swing.GroupLayout painelSaidaLayout = new javax.swing.GroupLayout(painelSaida);
        painelSaida.setLayout(painelSaidaLayout);
        painelSaidaLayout.setHorizontalGroup(
            painelSaidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSaidaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spSaida, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        painelSaidaLayout.setVerticalGroup(
            painelSaidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSaidaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spSaida, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelSaida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelSaida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(878, 728));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelecionarTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarTodasActionPerformed
        
        CryToxinTableModel tm = (CryToxinTableModel) tabelaProteinas.getModel();
        
        for ( int i = 0; i < tm.getRowCount(); i++ ) {
            tm.setValueAt( true, i, 2 );
        }
        
        tabelaProteinas.updateUI();
        
    }//GEN-LAST:event_btnSelecionarTodasActionPerformed

    private void btnLimparSelecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparSelecaoActionPerformed
        
        CryToxinTableModel tm = (CryToxinTableModel) tabelaProteinas.getModel();
        
        for ( int i = 0; i < tm.getRowCount(); i++ ) {
            tm.setValueAt( false, i, 2 );
        }
        
        tabelaProteinas.updateUI();
        
    }//GEN-LAST:event_btnLimparSelecaoActionPerformed

    private void btnAlinharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlinharActionPerformed
        
        try {
            
            areaSaida.setText( "" );
            Utils.appendToPane( areaSaida, "", Color.BLACK, Color.WHITE );

            CryToxinTableModel tm = (CryToxinTableModel) tabelaProteinas.getModel();

            try ( FileWriter fwCry = new FileWriter( "temp/cry.fasta" ) ) {

                for ( int i = 0; i < tm.getRowCount(); i++ ) {
                    if ( (Boolean) tm.getValueAt( i, 2 ) ) {

                        CryToxin ct = (CryToxin) tm.getValueAt( i, 0 );

                        if ( radioProtInteira.isSelected() ) {
                            fwCry.write( Utils.formatAsFasta( ct.name, ct.proteinSequence, 60 ) );
                        } else {

                            StringBuilder sb = new StringBuilder();

                            if ( checkFront.isSelected() ) {

                                if ( checkD1.isSelected() ) {
                                    sb.append( ct.getDomainSequence( 1 ) );
                                }

                                if ( checkD2.isSelected() ) {
                                    sb.append( ct.getDomainSequence( 2 ) );
                                }

                                if ( checkD3.isSelected() ) {
                                    sb.append( ct.getDomainSequence( 3 ) );
                                }

                            } else {

                                int start = -1;
                                int end = -1;

                                if ( checkD1.isSelected() ) {
                                    start = ct.getDomain( 1 ).interval.start;
                                    end = ct.getDomain( 1 ).interval.end;
                                }

                                if ( checkD2.isSelected() ) {
                                    if ( start == -1 ) {
                                        start = ct.getDomain( 2 ).interval.start;
                                    }
                                    end = ct.getDomain( 2 ).interval.end;
                                }

                                if ( checkD3.isSelected() ) {
                                    if ( start == -1 ) {
                                        start = ct.getDomain( 3 ).interval.start;
                                    }
                                    end = ct.getDomain( 3 ).interval.end;
                                }

                                sb.append( ct.proteinSequence.substring( start - 1, end ) );

                            }

                            fwCry.write( Utils.formatAsFasta( ct.name, sb.toString(), 60 ) );

                        }

                        fwCry.write( "\n" );

                    }
                }

            }

            String readFrom = "temp/cry.fasta";
            String fileNameBase = "temp/alignment";
            String fileExtension = "";
            String fileDescription = "";
            String command = "";
            String params = "";
            
            if ( radioClustalO.isSelected() ) {
                
                // true/false
                if ( Boolean.valueOf( configs.getProperty( "coDIS" ) ) ) {
                    params += "--dealign ";
                }
                
                if ( !Boolean.valueOf( configs.getProperty( "coMbedCGT" ) ) ) {
                    params += "--full ";
                }
                
                if ( !Boolean.valueOf( configs.getProperty( "coMbedCI" ) ) ) {
                    params += "--full-iter  ";
                }
                
                // indices default(0), 1, 2, 3, 4, 5
                switch ( configs.getProperty( "coNCI" ) ) {
                    case "0":
                        params += "--iter=0 ";
                        break;
                    case "1":
                        params += "--iter=1 ";
                        break;
                    case "2":
                        params += "--iter=2 ";
                        break;
                    case "3":
                        params += "--iter=3 ";
                        break;
                    case "4":
                        params += "--iter=4 ";
                        break;
                    case "5":
                        params += "--iter=5 ";
                        break;
                }
                
                switch ( configs.getProperty( "coMGTI" ) ) {
                    // -1 values are discarted, since then denote to not use this parameter
                    /*case "0":
                        break;*/
                    case "1":
                        params += "--max-guidetree-iterations=0 ";
                        break;
                    case "2":
                        params += "--max-guidetree-iterations=1 ";
                        break;
                    case "3":
                        params += "--max-guidetree-iterations=2 ";
                        break;
                    case "4":
                        params += "--max-guidetree-iterations=3 ";
                        break;
                    case "5":
                        params += "--max-guidetree-iterations=4 ";
                        break;
                    case "6":
                        params += "--max-guidetree-iterations=5 ";
                        break;
                }
                
                switch ( configs.getProperty( "coMHMMI" ) ) {
                    // same as above
                    /*case "0":
                        break;*/
                    case "1":
                        params += "--max-hmm-iterations=0 ";
                        break;
                    case "2":
                        params += "--max-hmm-iterations=1 ";
                        break;
                    case "3":
                        params += "--max-hmm-iterations=2 ";
                        break;
                    case "4":
                        params += "--max-hmm-iterations=3 ";
                        break;
                    case "5":
                        params += "--max-hmm-iterations=4 ";
                        break;
                    case "6":
                        params += "--max-hmm-iterations=5 ";
                        break;
                }
                                
                switch ( configs.getProperty( "coO" ) ) {
                    case "0":
                        params += "--output-order=tree-order ";
                        break;
                    case "1":
                        params += "--output-order=input-order ";
                        break;
                }
                        
                switch ( configs.getProperty( "coOF" ) ) {
                    case "0":
                        params += "--outfmt=clustal ";
                        fileExtension = "aln";
                        fileDescription = "Arquivo de Alinhamento Clustal";
                        break;
                    case "1":
                        params += "--outfmt=clustal --resno ";
                        fileExtension = "aln";
                        fileDescription = "Arquivo de Alinhamento Clustal Numerado";
                        break;
                    case "2":
                        params += "--outfmt=fasta ";
                        fileExtension = "fasta";
                        fileDescription = "Arquivo de Alinhamento FASTA";
                        break;
                    case "3":
                        params += "--outfmt=msf ";
                        fileExtension = "msf";
                        fileDescription = "Arquivo de Alinhamento MSF";
                        break;
                    case "4":
                        params += "--outfmt=phylip ";
                        fileExtension = "phy";
                        fileDescription = "Arquivo de Alinhamento PHYLIP";
                        break;
                    case "5":
                        params += "--outfmt=selex ";
                        fileExtension = "selex";
                        fileDescription = "Arquivo de Alinhamento SELEX";
                        break;
                    case "6":
                        params += "--outfmt=stockholm ";
                        fileExtension = "pfam";
                        fileDescription = "Arquivo de Alinhamento STOCKHOLM";
                        break;
                    case "7":
                        params += "--outfmt=vienna ";
                        fileExtension = "vie";
                        fileDescription = "Arquivo de Alinhamento VIENNA";
                        break;
                }
                
                command = "clustal/clustalo.exe --infmt=fasta -i " + readFrom + " -o " + fileNameBase + "." + fileExtension + " -t Protein --force -v " + params;
                
                Utils.runAlignmentProgram( 
                        readFrom, 
                        fileNameBase, 
                        fileExtension,
                        fileDescription,
                        command, 
                        "Clustal Ômega - SAÍDA", 
                        "Clustal Ômega - ERRO", 
                        new Color( 22, 142, 170 ), Color.RED,
                        new Color( 32, 160, 47 ), Color.RED,
                        areaSaida, btnAlinhar, lblAguarde,
                        new File( readFrom ) );
                
            } else if ( radioClustalW.isSelected() ) {
                
                // slow PW
                if ( configs.getProperty( "cwPWT" ).equals( "slow" ) ) {
                    
                    switch ( configs.getProperty( "cwPWSPWM" ) ) {
                        case "0":
                            params += "-PWMATRIX=BLOSUM ";
                            break;
                        case "1":
                            params += "-PWMATRIX=PAM ";
                            break;
                        case "2":
                            params += "-PWMATRIX=GONNET ";
                            break;
                        case "3":
                            params += "-PWMATRIX=ID ";
                            break;
                    }
                    
                    switch ( configs.getProperty( "cwPWSGO" ) ) {
                        case "0":
                            params += "-PWGAPOPEN=100 ";
                            break;
                        case "1":
                            params += "-PWGAPOPEN=50 ";
                            break;
                        case "2":
                            params += "-PWGAPOPEN=25 ";
                            break;
                        case "3":
                            params += "-PWGAPOPEN=10 ";
                            break;
                        case "4":
                            params += "-PWGAPOPEN=5 ";
                            break;
                        case "5":
                            params += "-PWGAPOPEN=2 ";
                            break;
                        case "6":
                            params += "-PWGAPOPEN=1 ";
                            break;
                    }
                    
                    switch ( configs.getProperty( "cwPWSGE" ) ) {
                        case "0":
                            params += "-PWGAPEXT=0.05 ";
                            break;
                        case "1":
                            params += "-PWGAPEXT=0.1 ";
                            break;
                        case "2":
                            params += "-PWGAPEXT=0.5 ";
                            break;
                        case "3":
                            params += "-PWGAPEXT=1.0 ";
                            break;
                        case "4":
                            params += "-PWGAPEXT=2.5 ";
                            break;
                        case "5":
                            params += "-PWGAPEXT=5.0 ";
                            break;
                        case "6":
                            params += "-PWGAPEXT=7.5 ";
                            break;
                        case "7":
                            params += "-PWGAPEXT=10.0 ";
                            break;
                    }
                       
                } else { // fast PW
                    
                    /*-KTUPLE=n    :word size
                    -WINDOW=n    :window around best diags.
                    -SCORE       :PERCENT or ABSOLUTE
                    -TOPDIAGS=n  :number of best diags.
                    -PAIRGAP=n   :gap penalty
                    */
                    
                    switch ( configs.getProperty( "cwPWFKTUP" ) ) {
                        case "0":
                            params += "-KTUPLE=1 ";
                            break;
                        case "1":
                            params += "-KTUPLE=2 ";
                            break;
                        case "2":
                            params += "-KTUPLE=3 ";
                            break;
                        case "3":
                            params += "-KTUPLE=4 ";
                            break;
                        case "4":
                            params += "-KTUPLE=5 ";
                            break;
                    }
                    
                    switch ( configs.getProperty( "cwPWFWL" ) ) {
                        case "0":
                            params += "-WINDOW=10 ";
                            break;
                        case "1":
                            params += "-WINDOW=9 ";
                            break;
                        case "2":
                            params += "-WINDOW=8 ";
                            break;
                        case "3":
                            params += "-WINDOW=7 ";
                            break;
                        case "4":
                            params += "-WINDOW=6 ";
                            break;
                        case "5":
                            params += "-WINDOW=5 ";
                            break;
                        case "6":
                            params += "-WINDOW=4 ";
                            break;
                        case "7":
                            params += "-WINDOW=3 ";
                            break;
                        case "8":
                            params += "-WINDOW=2 ";
                            break;
                        case "9":
                            params += "-WINDOW=1 ";
                            break;
                        case "10":
                            params += "-WINDOW=0 ";
                            break;
                    }
                    
                    switch ( configs.getProperty( "cwPWFST" ) ) {
                        case "0":
                            params += "-SCORE=PERCENT ";
                            break;
                        case "1":
                            params += "-SCORE=ABSOLUT ";
                            break;
                    }
                    
                    switch ( configs.getProperty( "cwPWFTD" ) ) {
                        case "0":
                            params += "-TOPDIAGS=10 ";
                            break;
                        case "1":
                            params += "-TOPDIAGS=9 ";
                            break;
                        case "2":
                            params += "-TOPDIAGS=8 ";
                            break;
                        case "3":
                            params += "-TOPDIAGS=7 ";
                            break;
                        case "4":
                            params += "-TOPDIAGS=6 ";
                            break;
                        case "5":
                            params += "-TOPDIAGS=5 ";
                            break;
                        case "6":
                            params += "-TOPDIAGS=4 ";
                            break;
                        case "7":
                            params += "-TOPDIAGS=3 ";
                            break;
                        case "8":
                            params += "-TOPDIAGS=2 ";
                            break;
                        case "9":
                            params += "-TOPDIAGS=1 ";
                            break;
                    }
                    
                    switch ( configs.getProperty( "cwPWFPG" ) ) {
                        case "0":
                            params += "-PAIRGAP=1 ";
                            break;
                        case "1":
                            params += "-PAIRGAP=2 ";
                            break;
                        case "2":
                            params += "-PAIRGAP=3 ";
                            break;
                        case "3":
                            params += "-PAIRGAP=4 ";
                            break;
                        case "4":
                            params += "-PAIRGAP=5 ";
                            break;
                        case "5":
                            params += "-PAIRGAP=10 ";
                            break;
                        case "6":
                            params += "-PAIRGAP=25 ";
                            break;
                        case "7":
                            params += "-PAIRGAP=50 ";
                            break;
                        case "8":
                            params += "-PAIRGAP=100 ";
                            break;
                        case "9":
                            params += "-PAIRGAP=250 ";
                            break;
                        case "10":
                            params += "-PAIRGAP=500 ";
                            break;
                    }
                    
                }
                

                // multi alignment
                switch ( configs.getProperty( "cwMPWM" ) ) {
                    case "0":
                        params += "-MATRIX=BLOSUM ";
                        break;
                    case "1":
                        params += "-MATRIX=PAM ";
                        break;
                    case "2":
                        params += "-MATRIX=GONNET ";
                        break;
                    case "3":
                        params += "-MATRIX=ID ";
                        break;
                }
                
                switch ( configs.getProperty( "cwMGO" ) ) {
                    case "0":
                        params += "-GAPOPEN=100 ";
                        break;
                    case "1":
                        params += "-GAPOPEN=50 ";
                        break;
                    case "2":
                        params += "-GAPOPEN=25 ";
                        break;
                    case "3":
                        params += "-GAPOPEN=10 ";
                        break;
                    case "4":
                        params += "-GAPOPEN=5 ";
                        break;
                    case "5":
                        params += "-GAPOPEN=2 ";
                        break;
                    case "6":
                        params += "-GAPOPEN=1 ";
                        break;
                }
                
                switch ( configs.getProperty( "cwMGE" ) ) {
                    case "0":
                        params += "-GAPEXT=0.05 ";
                        break;
                    case "1":
                        params += "-GAPEXT=0.2 ";
                        break;
                    case "2":
                        params += "-GAPEXT=0.5 ";
                        break;
                    case "3":
                        params += "-GAPEXT=1.0 ";
                        break;
                    case "4":
                        params += "-GAPEXT=2.5 ";
                        break;
                    case "5":
                        params += "-GAPEXT=5.0 ";
                        break;
                    case "6":
                        params += "-GAPEXT=7.5 ";
                        break;
                    case "7":
                        params += "-GAPEXT=10.0 ";
                        break;
                }
                
                switch ( configs.getProperty( "cwMGD" ) ) {
                    case "0":
                        params += "-GAPDIST=10 ";
                        break;
                    case "1":
                        params += "-GAPDIST=9 ";
                        break;
                    case "2":
                        params += "-GAPDIST=8 ";
                        break;
                    case "3":
                        params += "-GAPDIST=7 ";
                        break;
                    case "4":
                        params += "-GAPDIST=6 ";
                        break;
                    case "5":
                        params += "-GAPDIST=5 ";
                        break;
                    case "6":
                        params += "-GAPDIST=4 ";
                        break;
                    case "7":
                        params += "-GAPDIST=3 ";
                        break;
                    case "8":
                        params += "-GAPDIST=2 ";
                        break;
                    case "9":
                        params += "-GAPDIST=1 ";
                        break;
                }
                                
                if ( Boolean.valueOf( configs.getProperty( "cwMNEG" ) ) ) {
                    params += "-ENDGAPS ";
                }
                
                switch ( configs.getProperty( "cwMI" ) ) {
                    case "0":
                        params += "-ITERATION=NONE ";
                        break;
                    case "1":
                        params += "-ITERATION=TREE ";
                        break;
                    case "2":
                        params += "-ITERATION=ALIGNMENT ";
                        break;
                }
                
                switch ( configs.getProperty( "cwMNI" ) ) {
                    case "0":
                        params += "-NUMITER=1 ";
                        break;
                    case "1":
                        params += "-NUMITER=2 ";
                        break;
                    case "2":
                        params += "-NUMITER=3 ";
                        break;
                    case "3":
                        params += "-NUMITER=4 ";
                        break;
                    case "4":
                        params += "-NUMITER=5 ";
                        break;
                    case "5":
                        params += "-NUMITER=6 ";
                        break;
                    case "6":
                        params += "-NUMITER=7 ";
                        break;
                    case "7":
                        params += "-NUMITER=8 ";
                        break;
                    case "8":
                        params += "-NUMITER=9 ";
                        break;
                    case "9":
                        params += "-NUMITER=10 ";
                        break;
                }
                
                switch ( configs.getProperty( "cwMC" ) ) {
                    case "0":
                        params += "-CLUSTERING=NJ ";
                        break;
                    case "1":
                        params += "-CLUSTERING=UPGMA ";
                        break;
                }
                                
                switch ( configs.getProperty( "cwMO" ) ) {
                    case "0":
                        params += "-OUTORDER=ALIGNED ";
                        break;
                    case "1":
                        params += "-OUTORDER=INPUT ";
                        break;
                }
                
                switch ( configs.getProperty( "cwMOF" ) ) {
                    case "0":
                        params += "-OUTPUT=CLUSTAL ";
                        fileExtension = "aln";
                        fileDescription = "Arquivo de Alinhamento Clustal";
                        break;
                    case "1":
                        params += "-OUTPUT=CLUSTAL -SEQNOS=ON ";
                        fileExtension = "aln";
                        fileDescription = "Arquivo de Alinhamento Clustal Numerado";
                        break;
                    case "2":
                        params += "-OUTPUT=GCG ";
                        fileExtension = "msf";
                        fileDescription = "Arquivo de Alinhamento MSF";
                        break;
                    case "3":
                        params += "-OUTPUT=FASTA ";
                        fileExtension = "fasta";
                        fileDescription = "Arquivo de Alinhamento FASTA";
                        break;
                    case "4":
                        params += "-OUTPUT=PHYLIP ";
                        fileExtension = "phy";
                        fileDescription = "Arquivo de Alinhamento PHYLIP";
                        break;
                    case "5":
                        params += "-OUTPUT=NEXUS ";
                        fileExtension = "nexus";
                        fileDescription = "Arquivo de Alinhamento NEXUS";
                        break;
                    case "6":
                        params += "-OUTPUT=PIR ";
                        fileExtension = "pir";
                        fileDescription = "Arquivo de Alinhamento NBRF/PIR";
                        break;
                    case "7":
                        params += "-OUTPUT=GDE -CASE=UPPER ";
                        fileExtension = "gde";
                        fileDescription = "Arquivo de Alinhamento GDE";
                        break;
                }
                
                command = "clustal/clustalw2.exe -INFILE=" + readFrom + " -OUTFILE=" + fileNameBase + "." + fileExtension + " -ALIGN -TREE -TYPE=PROTEIN " + params;
                
                Utils.runAlignmentProgram( 
                        readFrom, 
                        fileNameBase, 
                        fileExtension,
                        fileDescription,
                        command, 
                        "ClustalW - SAÍDA", 
                        "ClustalW - ERRO", 
                        new Color( 22, 142, 170 ), Color.RED,
                        new Color( 32, 160, 47 ), Color.RED,
                        areaSaida, btnAlinhar, lblAguarde,
                        new File( readFrom ),
                        new File( readFrom.replace( ".fasta", ".dnd" ) ) );
                
            } else {
                
                if ( Boolean.valueOf( configs.getProperty( "mMFD" ) ) ) {
                    params += "-diags ";
                }
                
                switch ( configs.getProperty( "mMOF" ) ) {
                    case "0":
                        // there is not parameter for fasta format output,
                        // this is the default behavior
                        fileExtension = "fasta";
                        fileDescription = "Arquivo de Alinhamento FASTA";
                        break;
                    case "1":
                        params += "-clw ";
                        fileExtension = "aln";
                        fileDescription = "Arquivo de Alinhamento Clustal";
                        break;
                    case "2":
                        params += "-clwstrict ";
                        fileExtension = "aln";
                        fileDescription = "Arquivo de Alinhamento Clustal Estrito";
                        break;
                    case "3":
                        params += "-html ";
                        fileExtension = "html";
                        fileDescription = "Arquivo de Alinhamento em HTML";
                        break;
                    case "4":
                        params += "-msf ";
                        fileExtension = "msf";
                        fileDescription = "Arquivo de Alinhamento MSF";
                        break;
                }
                
                command = "muscle/muscle3.8.31_i86win32.exe -in " + readFrom + " -out " + fileNameBase + "." + fileExtension + " " + params;
                
                Utils.runAlignmentProgram( 
                        readFrom, 
                        fileNameBase, 
                        fileExtension,
                        fileDescription,
                        command, 
                        "MUSCLE - SAÍDA", 
                        "MUSCLE - SAÍDA", 
                        new Color( 22, 142, 170 ), new Color( 22, 142, 170 ),
                        new Color( 32, 160, 47 ), Color.RED,
                        areaSaida, btnAlinhar, lblAguarde,
                        new File( readFrom ) );
                
            }

        } catch ( IOException | InterruptedException exc ) {
            Utils.showExceptionMessage( this, exc );
        }
        
    }//GEN-LAST:event_btnAlinharActionPerformed

    private void radioProtInteiraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioProtInteiraActionPerformed
        
        checkD1.setEnabled( false );
        checkD2.setEnabled( false );
        checkD3.setEnabled( false );
        checkFront.setEnabled( false );
        
    }//GEN-LAST:event_radioProtInteiraActionPerformed

    private void radioPorDominioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPorDominioActionPerformed
        
        checkD1.setEnabled( true );
        checkD2.setEnabled( true);
        checkD3.setEnabled( true );
        checkFront.setEnabled( true );
        
    }//GEN-LAST:event_radioPorDominioActionPerformed

    private void btnConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfActionPerformed
        
        AlignAlgorithmsConfigDialog ad = new AlignAlgorithmsConfigDialog( this, true, defaultConfigs, configs );
        ad.setVisible( true );
        
    }//GEN-LAST:event_btnConfActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane areaSaida;
    private javax.swing.JButton btnAlinhar;
    private javax.swing.JButton btnBLA;
    private javax.swing.JButton btnCOL;
    private javax.swing.JButton btnConf;
    private javax.swing.JButton btnDIP;
    private javax.swing.ButtonGroup btnGrpAlgoritmoAlinhamento;
    private javax.swing.ButtonGroup btnGrpTipoAlinhamento;
    private javax.swing.JButton btnHEM;
    private javax.swing.JButton btnHYM;
    private javax.swing.JButton btnISO;
    private javax.swing.JButton btnLEP;
    private javax.swing.JButton btnLimparSelecao;
    private javax.swing.JButton btnNEU;
    private javax.swing.JButton btnORT;
    private javax.swing.JButton btnSelecionarTodas;
    private javax.swing.JButton btnTHY;
    private javax.swing.JButton btnTRI;
    private javax.swing.JCheckBox checkD1;
    private javax.swing.JCheckBox checkD2;
    private javax.swing.JCheckBox checkD3;
    private javax.swing.JCheckBox checkFront;
    private javax.swing.JLabel lblAguarde;
    private javax.swing.JPanel painel;
    private javax.swing.JPanel painelAlgoritmos;
    private javax.swing.JPanel painelAlinhamento;
    private javax.swing.JPanel painelSaida;
    private javax.swing.JPanel painelSelecoes;
    private javax.swing.JRadioButton radioClustalO;
    private javax.swing.JRadioButton radioClustalW;
    private javax.swing.JRadioButton radioMUSCLE;
    private javax.swing.JRadioButton radioPorDominio;
    private javax.swing.JRadioButton radioProtInteira;
    private javax.swing.JScrollPane spProteinas;
    private javax.swing.JScrollPane spSaida;
    private javax.swing.JTable tabelaProteinas;
    // End of variables declaration//GEN-END:variables
}
