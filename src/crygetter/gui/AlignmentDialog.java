/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package crygetter.gui;

import crygetter.model.CryToxin;
import crygetter.utils.Utils;
import java.awt.Color;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author David
 */
public class AlignmentDialog extends javax.swing.JDialog {

    private DefaultTableModel proteinTableModel;
    private Properties defaultConfigs;
    private Properties configs;
    private List<CryToxin> ctList;
    
    /**
     * Creates new form AlignDialog
     */
    public AlignmentDialog( java.awt.Frame parent, boolean modal, List<CryToxin> ctList, Properties defaultConfigs, Properties configs ) {
        
        super( parent, modal );
        initComponents();
        
        this.ctList = ctList;
        this.defaultConfigs = defaultConfigs;
        this.configs = configs;
        
        proteinTableModel = new CryToxinTableModel(
                new String[]{ "Protein", "Affected Order(s)", "Align" }, 0 );
        
        for ( CryToxin ct : ctList ) {
            proteinTableModel.addRow( new Object[]{ ct, ct.getOrdersAffectedDescription(), false } );
        }
        
        tableProteins.setModel( proteinTableModel );
        tableProteins.getColumnModel().getColumn( 0 ).setCellRenderer( new CryToxinTableCellRender() );
        tableProteins.getColumnModel().getColumn( 1 ).setCellRenderer( new CryToxinTableCellRender() );
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpAlgoritmoAlinhamento = new javax.swing.ButtonGroup();
        btnGrpTipoAlinhamento = new javax.swing.ButtonGroup();
        painel = new javax.swing.JPanel();
        spProteinas = new javax.swing.JScrollPane();
        tableProteins = new javax.swing.JTable();
        btnSelectAll = new javax.swing.JButton();
        btnCleanSelection = new javax.swing.JButton();
        panelSelections = new javax.swing.JPanel();
        btnCOL = new javax.swing.JButton();
        btnLEP = new javax.swing.JButton();
        btnDIP = new javax.swing.JButton();
        btnHEM = new javax.swing.JButton();
        btnHYM = new javax.swing.JButton();
        btnISO = new javax.swing.JButton();
        btnNEU = new javax.swing.JButton();
        btnORT = new javax.swing.JButton();
        btnBLA = new javax.swing.JButton();
        btnTHY = new javax.swing.JButton();
        btnTRI = new javax.swing.JButton();
        checkOnlyByOne = new javax.swing.JCheckBox();
        painelAlignment = new javax.swing.JPanel();
        radioCompleteProtein = new javax.swing.JRadioButton();
        radioByDomain = new javax.swing.JRadioButton();
        checkD1 = new javax.swing.JCheckBox();
        checkD2 = new javax.swing.JCheckBox();
        checkD3 = new javax.swing.JCheckBox();
        checkBoundaries = new javax.swing.JCheckBox();
        painelAlgorithms = new javax.swing.JPanel();
        radioClustalO = new javax.swing.JRadioButton();
        radioClustalW = new javax.swing.JRadioButton();
        radioMUSCLE = new javax.swing.JRadioButton();
        btnConf = new javax.swing.JButton();
        btnAlign = new javax.swing.JButton();
        btnAlignmentAnalysis = new javax.swing.JButton();
        lblWait = new javax.swing.JLabel();
        panelOutput = new javax.swing.JPanel();
        spOutput = new javax.swing.JScrollPane();
        areaOutput = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Protein Alignment");
        setResizable(false);

        painel.setBorder(javax.swing.BorderFactory.createTitledBorder("Proteins"));

        tableProteins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        spProteinas.setViewportView(tableProteins);

        btnSelectAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/add.png"))); // NOI18N
        btnSelectAll.setText("Select All");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnCleanSelection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/delete.png"))); // NOI18N
        btnCleanSelection.setText("Clear Selection");
        btnCleanSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanSelectionActionPerformed(evt);
            }
        });

        panelSelections.setBorder(javax.swing.BorderFactory.createTitledBorder("Selection by Order"));

        btnCOL.setText("COL");
        btnCOL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCOLActionPerformed(evt);
            }
        });

        btnLEP.setText("LEP");
        btnLEP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLEPActionPerformed(evt);
            }
        });

        btnDIP.setText("DIP");
        btnDIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDIPActionPerformed(evt);
            }
        });

        btnHEM.setText("HEM");
        btnHEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHEMActionPerformed(evt);
            }
        });

        btnHYM.setText("HYM");
        btnHYM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHYMActionPerformed(evt);
            }
        });

        btnISO.setText("ISO");
        btnISO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISOActionPerformed(evt);
            }
        });

        btnNEU.setText("NEU");
        btnNEU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNEUActionPerformed(evt);
            }
        });

        btnORT.setText("ORT");
        btnORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnORTActionPerformed(evt);
            }
        });

        btnBLA.setText("BLA");
        btnBLA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBLAActionPerformed(evt);
            }
        });

        btnTHY.setText("THY");
        btnTHY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTHYActionPerformed(evt);
            }
        });

        btnTRI.setText("TRI");
        btnTRI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTRIActionPerformed(evt);
            }
        });

        checkOnlyByOne.setSelected(true);
        checkOnlyByOne.setText("Select Toxins Affected Only by the Selected Order");

        javax.swing.GroupLayout panelSelectionsLayout = new javax.swing.GroupLayout(panelSelections);
        panelSelections.setLayout(panelSelectionsLayout);
        panelSelectionsLayout.setHorizontalGroup(
            panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSelectionsLayout.createSequentialGroup()
                        .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnCOL)
                            .addComponent(btnNEU))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnLEP)
                            .addComponent(btnORT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnDIP)
                            .addComponent(btnBLA))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnHEM)
                            .addComponent(btnTHY))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(btnHYM)
                            .addComponent(btnTRI))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnISO))
                    .addComponent(checkOnlyByOne))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSelectionsLayout.setVerticalGroup(
            panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCOL)
                    .addComponent(btnLEP)
                    .addComponent(btnDIP)
                    .addComponent(btnHEM)
                    .addComponent(btnHYM)
                    .addComponent(btnISO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSelectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNEU)
                    .addComponent(btnORT)
                    .addComponent(btnBLA)
                    .addComponent(btnTHY)
                    .addComponent(btnTRI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkOnlyByOne)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        painelAlignment.setBorder(javax.swing.BorderFactory.createTitledBorder("What do you want to align?"));

        btnGrpTipoAlinhamento.add(radioCompleteProtein);
        radioCompleteProtein.setSelected(true);
        radioCompleteProtein.setText("Complete Protein");
        radioCompleteProtein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCompleteProteinActionPerformed(evt);
            }
        });

        btnGrpTipoAlinhamento.add(radioByDomain);
        radioByDomain.setText("By Domains");
        radioByDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioByDomainActionPerformed(evt);
            }
        });

        checkD1.setText("Domain 1");
        checkD1.setEnabled(false);

        checkD2.setText("Domain 2");
        checkD2.setEnabled(false);

        checkD3.setText("Domain 3");
        checkD3.setEnabled(false);

        checkBoundaries.setText("Remove Boundaries");
        checkBoundaries.setEnabled(false);

        javax.swing.GroupLayout painelAlignmentLayout = new javax.swing.GroupLayout(painelAlignment);
        painelAlignment.setLayout(painelAlignmentLayout);
        painelAlignmentLayout.setHorizontalGroup(
            painelAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlignmentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioCompleteProtein)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAlignmentLayout.createSequentialGroup()
                        .addComponent(radioByDomain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoundaries))
                    .addGroup(painelAlignmentLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(painelAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkD2)
                            .addComponent(checkD1)
                            .addComponent(checkD3))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelAlignmentLayout.setVerticalGroup(
            painelAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlignmentLayout.createSequentialGroup()
                .addGroup(painelAlignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioByDomain)
                    .addComponent(checkBoundaries))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkD1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkD2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkD3))
            .addComponent(radioCompleteProtein)
        );

        painelAlgorithms.setBorder(javax.swing.BorderFactory.createTitledBorder("Multiple Sequence Alignment Algorithms (MSA)"));

        btnGrpAlgoritmoAlinhamento.add(radioClustalO);
        radioClustalO.setSelected(true);
        radioClustalO.setText("Clustal Omega");

        btnGrpAlgoritmoAlinhamento.add(radioClustalW);
        radioClustalW.setText("ClustalW");

        btnGrpAlgoritmoAlinhamento.add(radioMUSCLE);
        radioMUSCLE.setText("MUSCLE");

        btnConf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/wrench.png"))); // NOI18N
        btnConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelAlgorithmsLayout = new javax.swing.GroupLayout(painelAlgorithms);
        painelAlgorithms.setLayout(painelAlgorithmsLayout);
        painelAlgorithmsLayout.setHorizontalGroup(
            painelAlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlgorithmsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioClustalO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioClustalW)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioMUSCLE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConf)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelAlgorithmsLayout.setVerticalGroup(
            painelAlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlgorithmsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnConf)
                    .addComponent(radioClustalO)
                    .addComponent(radioClustalW)
                    .addComponent(radioMUSCLE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAlign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/accept.png"))); // NOI18N
        btnAlign.setText("Align");
        btnAlign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlignActionPerformed(evt);
            }
        });

        btnAlignmentAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/shape_align_center.png"))); // NOI18N
        btnAlignmentAnalysis.setText("Analysis");
        btnAlignmentAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlignmentAnalysisActionPerformed(evt);
            }
        });

        lblWait.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblWait.setForeground(new java.awt.Color(0, 102, 255));
        lblWait.setText(" ");

        javax.swing.GroupLayout painelLayout = new javax.swing.GroupLayout(painel);
        painel.setLayout(painelLayout);
        painelLayout.setHorizontalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spProteinas, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addComponent(btnSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCleanSelection))
                    .addComponent(painelAlgorithms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelAlignment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelLayout.createSequentialGroup()
                        .addComponent(btnAlign)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAlignmentAnalysis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblWait, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(panelSelections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelLayout.setVerticalGroup(
            painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spProteinas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelLayout.createSequentialGroup()
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSelectAll)
                            .addComponent(btnCleanSelection))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSelections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelAlgorithms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAlign)
                            .addComponent(lblWait)
                            .addComponent(btnAlignmentAnalysis))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Multiple Sequence Alignment Algorithm Process Output"));

        areaOutput.setFont(new java.awt.Font("Courier New", 1, 13)); // NOI18N
        spOutput.setViewportView(areaOutput);

        javax.swing.GroupLayout panelOutputLayout = new javax.swing.GroupLayout(panelOutput);
        panelOutput.setLayout(panelOutputLayout);
        panelOutputLayout.setHorizontalGroup(
            panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelOutputLayout.setVerticalGroup(
            panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(888, 728));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        
        CryToxinTableModel tm = (CryToxinTableModel) tableProteins.getModel();
        
        for ( int i = 0; i < tm.getRowCount(); i++ ) {
            tm.setValueAt( true, i, 2 );
        }
        
        tableProteins.updateUI();
        
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnCleanSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanSelectionActionPerformed
        
        CryToxinTableModel tm = (CryToxinTableModel) tableProteins.getModel();
        
        for ( int i = 0; i < tm.getRowCount(); i++ ) {
            tm.setValueAt( false, i, 2 );
        }
        
        tableProteins.updateUI();
        
    }//GEN-LAST:event_btnCleanSelectionActionPerformed

    private void btnAlignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlignActionPerformed
        
        try {

            areaOutput.setText( "" );
            Utils.appendToPane( areaOutput, "", Color.BLACK, Color.WHITE );

            CryToxinTableModel tm = (CryToxinTableModel) tableProteins.getModel();
            File cryFasta = new File( "temp/cry.fasta" );
            
            try ( FileWriter fwCry = new FileWriter( cryFasta ) ) {

                for ( int i = 0; i < tm.getRowCount(); i++ ) {
                    
                    if ( (Boolean) tm.getValueAt( i, 2 ) ) {

                        CryToxin ct = (CryToxin) tm.getValueAt( i, 0 );

                        if ( radioCompleteProtein.isSelected() ) {
                            fwCry.write( Utils.formatAsFasta( ct.name, ct.proteinSequence, 60 ) );
                        } else if ( checkD1.isSelected() || checkD2.isSelected() || checkD3.isSelected() ) {

                            StringBuilder sb = new StringBuilder();

                            if ( checkBoundaries.isSelected() ) {

                                if ( checkD1.isSelected() ) {
                                    sb.append( ct.getDomainSequence( 1 ) );
                                }

                                if ( checkD2.isSelected() ) {
                                    sb.append( ct.getDomainSequence( 2 ) );
                                }

                                if ( checkD3.isSelected() ) {
                                    sb.append( ct.getDomainSequence( 3 ) );
                                }

                            } else {

                                int start = -1;
                                int end = -1;

                                if ( checkD1.isSelected() ) {
                                    start = ct.getDomain( 1 ).interval.start;
                                    end = ct.getDomain( 1 ).interval.end;
                                }

                                if ( checkD2.isSelected() ) {
                                    if ( start == -1 ) {
                                        start = ct.getDomain( 2 ).interval.start;
                                    }
                                    end = ct.getDomain( 2 ).interval.end;
                                }

                                if ( checkD3.isSelected() ) {
                                    if ( start == -1 ) {
                                        start = ct.getDomain( 3 ).interval.start;
                                    }
                                    end = ct.getDomain( 3 ).interval.end;
                                }

                                sb.append( ct.proteinSequence.substring( start - 1, end ) );

                            }

                            fwCry.write( Utils.formatAsFasta( ct.name, sb.toString(), 60 ) );

                        } else {
                            JOptionPane.showMessageDialog( this, "You need to select at least one domain to align!",
                                    "ERROR", JOptionPane.ERROR_MESSAGE );
                            fwCry.close();
                            cryFasta.delete();
                            return;
                        }

                        fwCry.write( "\n" );

                    }
                    
                }

            }

            String readFrom = "temp/cry.fasta";
            String fileNameBase = "temp/alignment";
            String fileExtension = "";
            String fileDescription = "";
            String command = "";
            String params = "";

            if ( radioClustalO.isSelected() ) {

                // true/false
                if ( Boolean.valueOf( configs.getProperty( "coDIS" ) ) ) {
                    params += "--dealign ";
                }

                if ( !Boolean.valueOf( configs.getProperty( "coMbedCGT" ) ) ) {
                    params += "--full ";
                }

                if ( !Boolean.valueOf( configs.getProperty( "coMbedCI" ) ) ) {
                    params += "--full-iter  ";
                }

                // indices default(0), 1, 2, 3, 4, 5
                switch ( configs.getProperty( "coNCI" ) ) {
                    case "0":
                        params += "--iter=0 ";
                        break;
                    case "1":
                        params += "--iter=1 ";
                        break;
                    case "2":
                        params += "--iter=2 ";
                        break;
                    case "3":
                        params += "--iter=3 ";
                        break;
                    case "4":
                        params += "--iter=4 ";
                        break;
                    case "5":
                        params += "--iter=5 ";
                        break;
                }

                switch ( configs.getProperty( "coMGTI" ) ) {
                    // -1 values are discarted, since then denote to not use this parameter
                    /*case "0":
                        break;*/
                    case "1":
                        params += "--max-guidetree-iterations=0 ";
                        break;
                    case "2":
                        params += "--max-guidetree-iterations=1 ";
                        break;
                    case "3":
                        params += "--max-guidetree-iterations=2 ";
                        break;
                    case "4":
                        params += "--max-guidetree-iterations=3 ";
                        break;
                    case "5":
                        params += "--max-guidetree-iterations=4 ";
                        break;
                    case "6":
                        params += "--max-guidetree-iterations=5 ";
                        break;
                }

                switch ( configs.getProperty( "coMHMMI" ) ) {
                    // same as above
                    /*case "0":
                        break;*/
                    case "1":
                        params += "--max-hmm-iterations=0 ";
                        break;
                    case "2":
                        params += "--max-hmm-iterations=1 ";
                        break;
                    case "3":
                        params += "--max-hmm-iterations=2 ";
                        break;
                    case "4":
                        params += "--max-hmm-iterations=3 ";
                        break;
                    case "5":
                        params += "--max-hmm-iterations=4 ";
                        break;
                    case "6":
                        params += "--max-hmm-iterations=5 ";
                        break;
                }

                switch ( configs.getProperty( "coO" ) ) {
                    case "0":
                        params += "--output-order=tree-order ";
                        break;
                    case "1":
                        params += "--output-order=input-order ";
                        break;
                }

                switch ( configs.getProperty( "coOF" ) ) {
                    case "0":
                        params += "--outfmt=clustal ";
                        fileExtension = "aln";
                        fileDescription = "Clustal";
                        break;
                    case "1":
                        params += "--outfmt=clustal --resno ";
                        fileExtension = "aln";
                        fileDescription = "Clustal Alignment File With Numbers";
                        break;
                    case "2":
                        params += "--outfmt=fasta ";
                        fileExtension = "fasta";
                        fileDescription = "FASTA Alignment File";
                        break;
                    case "3":
                        params += "--outfmt=msf ";
                        fileExtension = "msf";
                        fileDescription = "MSF Alignment File";
                        break;
                    case "4":
                        params += "--outfmt=phylip ";
                        fileExtension = "phy";
                        fileDescription = "PHYLIP Alignment File";
                        break;
                    case "5":
                        params += "--outfmt=selex ";
                        fileExtension = "selex";
                        fileDescription = "SELEX Alignment File";
                        break;
                    case "6":
                        params += "--outfmt=stockholm ";
                        fileExtension = "pfam";
                        fileDescription = "STOCKHOLM Alignment File";
                        break;
                    case "7":
                        params += "--outfmt=vienna ";
                        fileExtension = "vie";
                        fileDescription = "VIENNA Alignment File";
                        break;
                }

                command = "clustal/clustalo.exe --infmt=fasta -i " + readFrom + " -o " + fileNameBase + "." + fileExtension + " -t Protein --force -v " + params;

                Utils.runAlignmentProgram( 
                        readFrom, 
                        fileNameBase, 
                        fileExtension,
                        fileDescription,
                        command, 
                        "Clustal Omega - OUTPUT", 
                        "Clustal Omega - ERROR", 
                        new Color( 22, 142, 170 ), Color.RED,
                        new Color( 32, 160, 47 ), Color.RED,
                        areaOutput, btnAlign, lblWait,
                        new File( readFrom ) );

            } else if ( radioClustalW.isSelected() ) {

                // slow PW
                if ( configs.getProperty( "cwPWT" ).equals( "slow" ) ) {

                    switch ( configs.getProperty( "cwPWSPWM" ) ) {
                        case "0":
                            params += "-PWMATRIX=BLOSUM ";
                            break;
                        case "1":
                            params += "-PWMATRIX=PAM ";
                            break;
                        case "2":
                            params += "-PWMATRIX=GONNET ";
                            break;
                        case "3":
                            params += "-PWMATRIX=ID ";
                            break;
                    }

                    switch ( configs.getProperty( "cwPWSGO" ) ) {
                        case "0":
                            params += "-PWGAPOPEN=100 ";
                            break;
                        case "1":
                            params += "-PWGAPOPEN=50 ";
                            break;
                        case "2":
                            params += "-PWGAPOPEN=25 ";
                            break;
                        case "3":
                            params += "-PWGAPOPEN=10 ";
                            break;
                        case "4":
                            params += "-PWGAPOPEN=5 ";
                            break;
                        case "5":
                            params += "-PWGAPOPEN=2 ";
                            break;
                        case "6":
                            params += "-PWGAPOPEN=1 ";
                            break;
                    }

                    switch ( configs.getProperty( "cwPWSGE" ) ) {
                        case "0":
                            params += "-PWGAPEXT=0.05 ";
                            break;
                        case "1":
                            params += "-PWGAPEXT=0.1 ";
                            break;
                        case "2":
                            params += "-PWGAPEXT=0.5 ";
                            break;
                        case "3":
                            params += "-PWGAPEXT=1.0 ";
                            break;
                        case "4":
                            params += "-PWGAPEXT=2.5 ";
                            break;
                        case "5":
                            params += "-PWGAPEXT=5.0 ";
                            break;
                        case "6":
                            params += "-PWGAPEXT=7.5 ";
                            break;
                        case "7":
                            params += "-PWGAPEXT=10.0 ";
                            break;
                    }

                } else { // fast PW

                    switch ( configs.getProperty( "cwPWFKTUP" ) ) {
                        case "0":
                            params += "-KTUPLE=1 ";
                            break;
                        case "1":
                            params += "-KTUPLE=2 ";
                            break;
                        case "2":
                            params += "-KTUPLE=3 ";
                            break;
                        case "3":
                            params += "-KTUPLE=4 ";
                            break;
                        case "4":
                            params += "-KTUPLE=5 ";
                            break;
                    }

                    switch ( configs.getProperty( "cwPWFWL" ) ) {
                        case "0":
                            params += "-WINDOW=10 ";
                            break;
                        case "1":
                            params += "-WINDOW=9 ";
                            break;
                        case "2":
                            params += "-WINDOW=8 ";
                            break;
                        case "3":
                            params += "-WINDOW=7 ";
                            break;
                        case "4":
                            params += "-WINDOW=6 ";
                            break;
                        case "5":
                            params += "-WINDOW=5 ";
                            break;
                        case "6":
                            params += "-WINDOW=4 ";
                            break;
                        case "7":
                            params += "-WINDOW=3 ";
                            break;
                        case "8":
                            params += "-WINDOW=2 ";
                            break;
                        case "9":
                            params += "-WINDOW=1 ";
                            break;
                        case "10":
                            params += "-WINDOW=0 ";
                            break;
                    }

                    switch ( configs.getProperty( "cwPWFST" ) ) {
                        case "0":
                            params += "-SCORE=PERCENT ";
                            break;
                        case "1":
                            params += "-SCORE=ABSOLUT ";
                            break;
                    }

                    switch ( configs.getProperty( "cwPWFTD" ) ) {
                        case "0":
                            params += "-TOPDIAGS=10 ";
                            break;
                        case "1":
                            params += "-TOPDIAGS=9 ";
                            break;
                        case "2":
                            params += "-TOPDIAGS=8 ";
                            break;
                        case "3":
                            params += "-TOPDIAGS=7 ";
                            break;
                        case "4":
                            params += "-TOPDIAGS=6 ";
                            break;
                        case "5":
                            params += "-TOPDIAGS=5 ";
                            break;
                        case "6":
                            params += "-TOPDIAGS=4 ";
                            break;
                        case "7":
                            params += "-TOPDIAGS=3 ";
                            break;
                        case "8":
                            params += "-TOPDIAGS=2 ";
                            break;
                        case "9":
                            params += "-TOPDIAGS=1 ";
                            break;
                    }

                    switch ( configs.getProperty( "cwPWFPG" ) ) {
                        case "0":
                            params += "-PAIRGAP=1 ";
                            break;
                        case "1":
                            params += "-PAIRGAP=2 ";
                            break;
                        case "2":
                            params += "-PAIRGAP=3 ";
                            break;
                        case "3":
                            params += "-PAIRGAP=4 ";
                            break;
                        case "4":
                            params += "-PAIRGAP=5 ";
                            break;
                        case "5":
                            params += "-PAIRGAP=10 ";
                            break;
                        case "6":
                            params += "-PAIRGAP=25 ";
                            break;
                        case "7":
                            params += "-PAIRGAP=50 ";
                            break;
                        case "8":
                            params += "-PAIRGAP=100 ";
                            break;
                        case "9":
                            params += "-PAIRGAP=250 ";
                            break;
                        case "10":
                            params += "-PAIRGAP=500 ";
                            break;
                    }

                }


                // multi alignment
                switch ( configs.getProperty( "cwMPWM" ) ) {
                    case "0":
                        params += "-MATRIX=BLOSUM ";
                        break;
                    case "1":
                        params += "-MATRIX=PAM ";
                        break;
                    case "2":
                        params += "-MATRIX=GONNET ";
                        break;
                    case "3":
                        params += "-MATRIX=ID ";
                        break;
                }

                switch ( configs.getProperty( "cwMGO" ) ) {
                    case "0":
                        params += "-GAPOPEN=100 ";
                        break;
                    case "1":
                        params += "-GAPOPEN=50 ";
                        break;
                    case "2":
                        params += "-GAPOPEN=25 ";
                        break;
                    case "3":
                        params += "-GAPOPEN=10 ";
                        break;
                    case "4":
                        params += "-GAPOPEN=5 ";
                        break;
                    case "5":
                        params += "-GAPOPEN=2 ";
                        break;
                    case "6":
                        params += "-GAPOPEN=1 ";
                        break;
                }

                switch ( configs.getProperty( "cwMGE" ) ) {
                    case "0":
                        params += "-GAPEXT=0.05 ";
                        break;
                    case "1":
                        params += "-GAPEXT=0.2 ";
                        break;
                    case "2":
                        params += "-GAPEXT=0.5 ";
                        break;
                    case "3":
                        params += "-GAPEXT=1.0 ";
                        break;
                    case "4":
                        params += "-GAPEXT=2.5 ";
                        break;
                    case "5":
                        params += "-GAPEXT=5.0 ";
                        break;
                    case "6":
                        params += "-GAPEXT=7.5 ";
                        break;
                    case "7":
                        params += "-GAPEXT=10.0 ";
                        break;
                }

                switch ( configs.getProperty( "cwMGD" ) ) {
                    case "0":
                        params += "-GAPDIST=10 ";
                        break;
                    case "1":
                        params += "-GAPDIST=9 ";
                        break;
                    case "2":
                        params += "-GAPDIST=8 ";
                        break;
                    case "3":
                        params += "-GAPDIST=7 ";
                        break;
                    case "4":
                        params += "-GAPDIST=6 ";
                        break;
                    case "5":
                        params += "-GAPDIST=5 ";
                        break;
                    case "6":
                        params += "-GAPDIST=4 ";
                        break;
                    case "7":
                        params += "-GAPDIST=3 ";
                        break;
                    case "8":
                        params += "-GAPDIST=2 ";
                        break;
                    case "9":
                        params += "-GAPDIST=1 ";
                        break;
                }

                if ( Boolean.valueOf( configs.getProperty( "cwMNEG" ) ) ) {
                    params += "-ENDGAPS ";
                }

                switch ( configs.getProperty( "cwMI" ) ) {
                    case "0":
                        params += "-ITERATION=NONE ";
                        break;
                    case "1":
                        params += "-ITERATION=TREE ";
                        break;
                    case "2":
                        params += "-ITERATION=ALIGNMENT ";
                        break;
                }

                switch ( configs.getProperty( "cwMNI" ) ) {
                    case "0":
                        params += "-NUMITER=1 ";
                        break;
                    case "1":
                        params += "-NUMITER=2 ";
                        break;
                    case "2":
                        params += "-NUMITER=3 ";
                        break;
                    case "3":
                        params += "-NUMITER=4 ";
                        break;
                    case "4":
                        params += "-NUMITER=5 ";
                        break;
                    case "5":
                        params += "-NUMITER=6 ";
                        break;
                    case "6":
                        params += "-NUMITER=7 ";
                        break;
                    case "7":
                        params += "-NUMITER=8 ";
                        break;
                    case "8":
                        params += "-NUMITER=9 ";
                        break;
                    case "9":
                        params += "-NUMITER=10 ";
                        break;
                }

                switch ( configs.getProperty( "cwMC" ) ) {
                    case "0":
                        params += "-CLUSTERING=NJ ";
                        break;
                    case "1":
                        params += "-CLUSTERING=UPGMA ";
                        break;
                }

                switch ( configs.getProperty( "cwMO" ) ) {
                    case "0":
                        params += "-OUTORDER=ALIGNED ";
                        break;
                    case "1":
                        params += "-OUTORDER=INPUT ";
                        break;
                }

                switch ( configs.getProperty( "cwMOF" ) ) {
                    case "0":
                        params += "-OUTPUT=CLUSTAL ";
                        fileExtension = "aln";
                        fileDescription = "Clustal Alignment File";
                        break;
                    case "1":
                        params += "-OUTPUT=CLUSTAL -SEQNOS=ON ";
                        fileExtension = "aln";
                        fileDescription = "Clustal Alignment File With Numbers";
                        break;
                    case "2":
                        params += "-OUTPUT=GCG ";
                        fileExtension = "msf";
                        fileDescription = "MSF Alignment File";
                        break;
                    case "3":
                        params += "-OUTPUT=FASTA ";
                        fileExtension = "fasta";
                        fileDescription = "FASTA Alignment File";
                        break;
                    case "4":
                        params += "-OUTPUT=PHYLIP ";
                        fileExtension = "phy";
                        fileDescription = "PHYLIP Alignment File";
                        break;
                    case "5":
                        params += "-OUTPUT=NEXUS ";
                        fileExtension = "nexus";
                        fileDescription = "NEXUS Alignment File";
                        break;
                    case "6":
                        params += "-OUTPUT=PIR ";
                        fileExtension = "pir";
                        fileDescription = "NBRF/PIR Alignment File";
                        break;
                    case "7":
                        params += "-OUTPUT=GDE -CASE=UPPER ";
                        fileExtension = "gde";
                        fileDescription = "GDE Alignment File";
                        break;
                }

                command = "clustal/clustalw2.exe -INFILE=" + readFrom + " -OUTFILE=" + fileNameBase + "." + fileExtension + " -ALIGN -TREE -TYPE=PROTEIN " + params;

                Utils.runAlignmentProgram( 
                        readFrom, 
                        fileNameBase, 
                        fileExtension,
                        fileDescription,
                        command, 
                        "ClustalW - OUTPUT", 
                        "ClustalW - ERROR", 
                        new Color( 22, 142, 170 ), Color.RED,
                        new Color( 32, 160, 47 ), Color.RED,
                        areaOutput, btnAlign, lblWait,
                        new File( readFrom ),
                        new File( readFrom.replace( ".fasta", ".dnd" ) ) );

            } else {

                if ( Boolean.valueOf( configs.getProperty( "mMFD" ) ) ) {
                    params += "-diags ";
                }

                switch ( configs.getProperty( "mMOF" ) ) {
                    case "0":
                        // there is not parameter for fasta format output,
                        // this is the default behavior
                        fileExtension = "fasta";
                        fileDescription = "FASTA";
                        break;
                    case "1":
                        params += "-clw ";
                        fileExtension = "aln";
                        fileDescription = "Clustal Alignment File";
                        break;
                    case "2":
                        params += "-clwstrict ";
                        fileExtension = "aln";
                        fileDescription = "Strict Clustal Alignment File";
                        break;
                    case "3":
                        params += "-html ";
                        fileExtension = "html";
                        fileDescription = "HTML Alignment File";
                        break;
                    case "4":
                        params += "-msf ";
                        fileExtension = "msf";
                        fileDescription = "MSF Alignment File";
                        break;
                }

                command = "muscle/muscle3.8.31_i86win32.exe -in " + readFrom + " -out " + fileNameBase + "." + fileExtension + " " + params;

                Utils.runAlignmentProgram( 
                        readFrom, 
                        fileNameBase, 
                        fileExtension,
                        fileDescription,
                        command, 
                        "MUSCLE - OUTPUT", 
                        "MUSCLE - OUTPUT", 
                        new Color( 22, 142, 170 ), new Color( 22, 142, 170 ),
                        new Color( 32, 160, 47 ), Color.RED,
                        areaOutput, btnAlign, lblWait,
                        new File( readFrom ) );

            }

        } catch ( IOException | InterruptedException exc ) {
            Utils.showExceptionMessage( this, exc );
        }
        
    }//GEN-LAST:event_btnAlignActionPerformed

    private void radioCompleteProteinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCompleteProteinActionPerformed
        
        checkD1.setEnabled( false );
        checkD2.setEnabled( false );
        checkD3.setEnabled( false );
        checkBoundaries.setEnabled( false );
        
    }//GEN-LAST:event_radioCompleteProteinActionPerformed

    private void radioByDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioByDomainActionPerformed
        
        checkD1.setEnabled( true );
        checkD2.setEnabled( true);
        checkD3.setEnabled( true );
        checkBoundaries.setEnabled( true );
        
    }//GEN-LAST:event_radioByDomainActionPerformed

    private void btnConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfActionPerformed
        
        AlignmentAlgorithmsConfigDialog ad = new AlignmentAlgorithmsConfigDialog( this, true, defaultConfigs, configs );
        ad.setVisible( true );
        
    }//GEN-LAST:event_btnConfActionPerformed

    private void btnCOLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCOLActionPerformed
        selectedAffectedToxins( "COL" );
    }//GEN-LAST:event_btnCOLActionPerformed

    private void btnLEPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLEPActionPerformed
        selectedAffectedToxins( "LEP" );
    }//GEN-LAST:event_btnLEPActionPerformed

    private void btnDIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDIPActionPerformed
        selectedAffectedToxins( "DIP" );
    }//GEN-LAST:event_btnDIPActionPerformed

    private void btnHEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHEMActionPerformed
        selectedAffectedToxins( "HEM" );
    }//GEN-LAST:event_btnHEMActionPerformed

    private void btnHYMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHYMActionPerformed
        selectedAffectedToxins( "HYM" );
    }//GEN-LAST:event_btnHYMActionPerformed

    private void btnISOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISOActionPerformed
        selectedAffectedToxins( "ISO" );
    }//GEN-LAST:event_btnISOActionPerformed

    private void btnNEUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNEUActionPerformed
        selectedAffectedToxins( "NEU" );
    }//GEN-LAST:event_btnNEUActionPerformed

    private void btnORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnORTActionPerformed
        selectedAffectedToxins( "ORT" );
    }//GEN-LAST:event_btnORTActionPerformed

    private void btnBLAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBLAActionPerformed
        selectedAffectedToxins( "BLA" );
    }//GEN-LAST:event_btnBLAActionPerformed

    private void btnTHYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTHYActionPerformed
        selectedAffectedToxins( "THY" );
    }//GEN-LAST:event_btnTHYActionPerformed

    private void btnTRIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTRIActionPerformed
        selectedAffectedToxins( "TRI" );
    }//GEN-LAST:event_btnTRIActionPerformed

    private void btnAlignmentAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlignmentAnalysisActionPerformed
        
        JFileChooser jfc = new JFileChooser();
        FileNameExtensionFilter fnef = new FileNameExtensionFilter( 
                "Clustal Alignment File (*.aln)", "aln" );

        for ( FileFilter f : jfc.getChoosableFileFilters() ) {
            jfc.removeChoosableFileFilter( f );
        }

        jfc.setFileFilter( fnef );
        jfc.setDialogTitle( "Load Alignment Data" );
        jfc.setFileSelectionMode( JFileChooser.FILES_ONLY );
        jfc.setMultiSelectionEnabled( false );
        
        if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
            try {
                Map<String, List<String>> extractedData = Utils.extractAlignmentData( jfc.getSelectedFile(), 60 );
                AlignmentAnalysis aa = new AlignmentAnalysis( this, true, ctList, extractedData );
                aa.setVisible( true );
            } catch ( IOException exc ) {
                Utils.showExceptionMessage( this, exc );
            }
        }
        
    }//GEN-LAST:event_btnAlignmentAnalysisActionPerformed
    
    private void selectedAffectedToxins( String order ) {
        
        boolean found = false;
        
        for ( int i = 0; i < proteinTableModel.getRowCount(); i++ ) {
            
            CryToxin ct = (CryToxin) proteinTableModel.getValueAt( i, 0 );
            
            if ( checkOnlyByOne.isSelected() ) {
                if ( ct.affectsOnly( order ) ) {
                    proteinTableModel.setValueAt( true, i, 2 );
                    found = true;
                }
            } else {
                if ( ct.affects( order ) ) {
                    proteinTableModel.setValueAt( true, i, 2 );
                    found = true;
                }
            }
            
        }
        
        tableProteins.updateUI();
        
        if ( !found ) {
            
            String message = "There isn't Cry Toxin(s) that affects ";
            
            if ( checkOnlyByOne.isSelected() ) {
                message += "only";
            }
            
            message += " the \"" + order + "\" order.";
            
            JOptionPane.showMessageDialog( this, message, "Warning", JOptionPane.WARNING_MESSAGE );
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane areaOutput;
    private javax.swing.JButton btnAlign;
    private javax.swing.JButton btnAlignmentAnalysis;
    private javax.swing.JButton btnBLA;
    private javax.swing.JButton btnCOL;
    private javax.swing.JButton btnCleanSelection;
    private javax.swing.JButton btnConf;
    private javax.swing.JButton btnDIP;
    private javax.swing.ButtonGroup btnGrpAlgoritmoAlinhamento;
    private javax.swing.ButtonGroup btnGrpTipoAlinhamento;
    private javax.swing.JButton btnHEM;
    private javax.swing.JButton btnHYM;
    private javax.swing.JButton btnISO;
    private javax.swing.JButton btnLEP;
    private javax.swing.JButton btnNEU;
    private javax.swing.JButton btnORT;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnTHY;
    private javax.swing.JButton btnTRI;
    private javax.swing.JCheckBox checkBoundaries;
    private javax.swing.JCheckBox checkD1;
    private javax.swing.JCheckBox checkD2;
    private javax.swing.JCheckBox checkD3;
    private javax.swing.JCheckBox checkOnlyByOne;
    private javax.swing.JLabel lblWait;
    private javax.swing.JPanel painel;
    private javax.swing.JPanel painelAlgorithms;
    private javax.swing.JPanel painelAlignment;
    private javax.swing.JPanel panelOutput;
    private javax.swing.JPanel panelSelections;
    private javax.swing.JRadioButton radioByDomain;
    private javax.swing.JRadioButton radioClustalO;
    private javax.swing.JRadioButton radioClustalW;
    private javax.swing.JRadioButton radioCompleteProtein;
    private javax.swing.JRadioButton radioMUSCLE;
    private javax.swing.JScrollPane spOutput;
    private javax.swing.JScrollPane spProteinas;
    private javax.swing.JTable tableProteins;
    // End of variables declaration//GEN-END:variables
}
