/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package crygetter.gui;

import crygetter.utils.Utils;
import java.awt.Desktop;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Properties;
import javax.swing.JDialog;

/**
 *
 * @author David
 */
public class AlignAlgorithmsConfigDialog extends javax.swing.JDialog {

    private Properties defaultConfigs;
    private Properties configs;
    
    /**
     * Creates new form ClustalConfigDialog
     */
    public AlignAlgorithmsConfigDialog( JDialog parent, boolean modal, Properties defaultConfigs, Properties configs ) {
        
        super( parent, modal );
        initComponents();
        
        this.defaultConfigs = defaultConfigs;
        this.configs = configs;
        
        checkCODealign.setSelected( Boolean.valueOf( configs.getProperty( "coDIS" ) ) );
        checkCOClusteringGuide.setSelected( Boolean.valueOf( configs.getProperty( "coMbedCGT" ) ) );
        checkCOClusteringIteration.setSelected( Boolean.valueOf( configs.getProperty( "coMbedCI" ) ) );
        
        comboCOCombIter.setSelectedIndex( Integer.parseInt( configs.getProperty( "coNCI" ) ) );
        comboCOMaxGuide.setSelectedIndex( Integer.parseInt( configs.getProperty( "coMGTI" ) ) );
        comboCOHMM.setSelectedIndex( Integer.parseInt( configs.getProperty( "coMHMMI" ) ) );
        comboCOOrder.setSelectedIndex( Integer.parseInt( configs.getProperty( "coO" ) ) );
        comboCOOutputF.setSelectedIndex( Integer.parseInt( configs.getProperty( "coOF" ) ) );
        
        if ( configs.getProperty( "cwPWT" ).equals( "slow" ) ) {
            radioCWSlow.setSelected( true );
        } else {
            radioCWFast.setSelected( true );
        }
        
        comboCWPWProteW.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWSPWM" ) ) );
        comboCWPWGapOpen.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWSGO" ) ) );
        comboCWPWGapExt.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWSGE" ) ) );

        comboCWPWKTUP.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWFKTUP" ) ) );
        comboCWPWWinLen.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWFWL" ) ) );
        comboCWPWScoreT.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWFST" ) ) );
        comboCWPWTopDiags.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWFTD" ) ) );
        comboCWPWPairG.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwPWFPG" ) ) );

        comboCWMProtW.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMPWM" ) ) );
        comboCWMGapOpen.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMGO" ) ) );
        comboCWMGapExt.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMGE" ) ) );
        comboCWMGapDist.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMGD" ) ) );
        checkCWMNoEndGaps.setSelected( Boolean.valueOf( configs.getProperty( "cwMNEG" ) ) );
        comboCWMIter.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMI" ) ) );
        comboCWMNumIter.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMNI" ) ) );
        comboCWMClust.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMC" ) ) );
        comboCWMOrder.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMO" ) ) );
        comboCWMOutputF.setSelectedIndex( Integer.parseInt( configs.getProperty( "cwMOF" ) ) );
        
        comboMOutputTree.setSelectedIndex( Integer.parseInt( configs.getProperty( "mMOT" ) ) );
        comboMOutputF.setSelectedIndex( Integer.parseInt( configs.getProperty( "mMOF" ) ) );
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        painelConfCO = new javax.swing.JPanel();
        checkCODealign = new javax.swing.JCheckBox();
        checkCOClusteringGuide = new javax.swing.JCheckBox();
        checkCOClusteringIteration = new javax.swing.JCheckBox();
        lblCOCombIter = new javax.swing.JLabel();
        lblCOMaxGuide = new javax.swing.JLabel();
        lblCOHMM = new javax.swing.JLabel();
        lblCOOrder = new javax.swing.JLabel();
        lblCOOutputF = new javax.swing.JLabel();
        comboCOCombIter = new javax.swing.JComboBox();
        comboCOMaxGuide = new javax.swing.JComboBox();
        comboCOHMM = new javax.swing.JComboBox();
        comboCOOrder = new javax.swing.JComboBox();
        comboCOOutputF = new javax.swing.JComboBox();
        btnCOPadrao = new javax.swing.JButton();
        btnCOAjuda = new javax.swing.JButton();
        painelConfCW = new javax.swing.JPanel();
        painelCWPW = new javax.swing.JPanel();
        lblCWType = new javax.swing.JLabel();
        radioCWSlow = new javax.swing.JRadioButton();
        radioCWFast = new javax.swing.JRadioButton();
        painelCWPWSlow = new javax.swing.JPanel();
        lblCWPWProtW = new javax.swing.JLabel();
        lblCWPWSGapOpen = new javax.swing.JLabel();
        lblCWPWGapExt = new javax.swing.JLabel();
        comboCWPWProteW = new javax.swing.JComboBox();
        comboCWPWGapOpen = new javax.swing.JComboBox();
        comboCWPWGapExt = new javax.swing.JComboBox();
        painelCWPWFast = new javax.swing.JPanel();
        lblCWPWKTUP = new javax.swing.JLabel();
        lblCWPWWinLen = new javax.swing.JLabel();
        lblCWPWScoreT = new javax.swing.JLabel();
        lblCWPWTopDiags = new javax.swing.JLabel();
        lblCWPWPairG = new javax.swing.JLabel();
        comboCWPWKTUP = new javax.swing.JComboBox();
        comboCWPWWinLen = new javax.swing.JComboBox();
        comboCWPWScoreT = new javax.swing.JComboBox();
        comboCWPWTopDiags = new javax.swing.JComboBox();
        comboCWPWPairG = new javax.swing.JComboBox();
        painelCWM = new javax.swing.JPanel();
        lblCWMProtW = new javax.swing.JLabel();
        lblCWMGapOpen = new javax.swing.JLabel();
        lblCWMGapExt = new javax.swing.JLabel();
        lblCWMGatDist = new javax.swing.JLabel();
        checkCWMNoEndGaps = new javax.swing.JCheckBox();
        lblCWMIter = new javax.swing.JLabel();
        lblCWMNumIter = new javax.swing.JLabel();
        lblCWMClust = new javax.swing.JLabel();
        lblCWMOrder = new javax.swing.JLabel();
        lblCWMOutputF = new javax.swing.JLabel();
        comboCWMProtW = new javax.swing.JComboBox();
        comboCWMGapOpen = new javax.swing.JComboBox();
        comboCWMGapExt = new javax.swing.JComboBox();
        comboCWMGapDist = new javax.swing.JComboBox();
        comboCWMIter = new javax.swing.JComboBox();
        comboCWMNumIter = new javax.swing.JComboBox();
        comboCWMClust = new javax.swing.JComboBox();
        comboCWMOrder = new javax.swing.JComboBox();
        comboCWMOutputF = new javax.swing.JComboBox();
        btnCWPadrao = new javax.swing.JButton();
        btnCWAjuda = new javax.swing.JButton();
        painelConfM = new javax.swing.JPanel();
        lblMOutputTree = new javax.swing.JLabel();
        lblMOutputF = new javax.swing.JLabel();
        comboMOutputTree = new javax.swing.JComboBox();
        comboMOutputF = new javax.swing.JComboBox();
        btnMPadrao = new javax.swing.JButton();
        btnMAjuda = new javax.swing.JButton();
        painelBaixo = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configurações dos Algoritmos de Alinhamento Múltiplo");
        setResizable(false);

        painelConfCO.setBackground(new java.awt.Color(153, 204, 255));
        painelConfCO.setBorder(javax.swing.BorderFactory.createTitledBorder("Clustal Ômega"));

        checkCODealign.setText("Dealign Input Sequences");
        checkCODealign.setToolTipText("Remove any existing alignment (gaps) from input sequences. Default value is: no [false]");

        checkCOClusteringGuide.setSelected(true);
        checkCOClusteringGuide.setText("mBed-Like Clustering Guide-tree");
        checkCOClusteringGuide.setToolTipText("This option uses a sample of the input sequences and then represents all sequences as vectors to these sequences, enabling much more rapid generation of the guide tree, especially when the number of sequences is large. Default value is: yes [true]");

        checkCOClusteringIteration.setSelected(true);
        checkCOClusteringIteration.setText("mBed-Like Clustering Iteration");
        checkCOClusteringIteration.setToolTipText("Use mBed-like clustering during subsequent iterations. Default value is: yes [true]");

        lblCOCombIter.setText("Number of Combined Iterations:");

        lblCOMaxGuide.setText("Max Guide Tree Iterations:");

        lblCOHMM.setText("Max HMM Iterations:");

        lblCOOrder.setText("Order:");

        lblCOOutputF.setText("Output Format:");
        lblCOOutputF.setToolTipText("");

        comboCOCombIter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default(0)", "1", "2", "3", "4", "5" }));
        comboCOCombIter.setToolTipText("Number of (combined guide-tree/HMM) iterations. Default value is: default(0) [0]");

        comboCOMaxGuide.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "1", "2", "3", "4", "5" }));
        comboCOMaxGuide.setToolTipText("Having set the number of combined iterations, this parameter can be changed to limit the number of guide tree iterations within the combined iterations. Default value is: default [-1]");

        comboCOHMM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "default", "0", "1", "2", "3", "4", "5" }));
        comboCOHMM.setToolTipText("Having set the number of combined iterations, this parameter can be changed to limit the number of HMM iterations within the combined iterations. Default value is: default [-1]");

        comboCOOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aligned", "Input" }));
        comboCOOrder.setToolTipText("The order in which the sequences appear in the final alignment. Default value is: aligned");

        comboCOOutputF.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Clustal without numbers", "Clustal with numbers", "Pearson/FASTA", "MSF", "PHYLIP", "SELEX", "STOCKHOLM", "VIENNA" }));
        comboCOOutputF.setToolTipText("Format for generated multiple sequence alignment. Default value is: Clustal w/o numbers [clustal]");

        btnCOPadrao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/report.png"))); // NOI18N
        btnCOPadrao.setText("Padrão");
        btnCOPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCOPadraoActionPerformed(evt);
            }
        });

        btnCOAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/help.png"))); // NOI18N
        btnCOAjuda.setText("Ajuda EMBL-EBI");
        btnCOAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCOAjudaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelConfCOLayout = new javax.swing.GroupLayout(painelConfCO);
        painelConfCO.setLayout(painelConfCOLayout);
        painelConfCOLayout.setHorizontalGroup(
            painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfCOLayout.createSequentialGroup()
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelConfCOLayout.createSequentialGroup()
                        .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelConfCOLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCOCombIter, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCOMaxGuide, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCOHMM, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCOOrder, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCOOutputF, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboCOCombIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCOMaxGuide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCOHMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCOOutputF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCOOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(painelConfCOLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkCODealign)
                                    .addComponent(checkCOClusteringGuide)
                                    .addComponent(checkCOClusteringIteration))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConfCOLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCOPadrao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCOAjuda)))
                .addContainerGap())
        );
        painelConfCOLayout.setVerticalGroup(
            painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfCOLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkCODealign)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkCOClusteringGuide)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkCOClusteringIteration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOCombIter)
                    .addComponent(comboCOCombIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOMaxGuide)
                    .addComponent(comboCOMaxGuide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOHMM)
                    .addComponent(comboCOHMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOOrder)
                    .addComponent(comboCOOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOOutputF)
                    .addComponent(comboCOOutputF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelConfCOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCOAjuda)
                    .addComponent(btnCOPadrao))
                .addContainerGap())
        );

        painelConfCW.setBackground(new java.awt.Color(255, 204, 204));
        painelConfCW.setBorder(javax.swing.BorderFactory.createTitledBorder("ClustalW"));

        painelCWPW.setBackground(new java.awt.Color(255, 204, 204));
        painelCWPW.setBorder(javax.swing.BorderFactory.createTitledBorder("Pairwise Alignment"));

        lblCWType.setText("Type:");
        lblCWType.setToolTipText("The alignment method used to perform the pairwise alignments used to generate the guide tree. Default value is: slow");

        buttonGroup1.add(radioCWSlow);
        radioCWSlow.setSelected(true);
        radioCWSlow.setText("Slow");

        buttonGroup1.add(radioCWFast);
        radioCWFast.setText("Fast");

        painelCWPWSlow.setBackground(new java.awt.Color(255, 204, 204));
        painelCWPWSlow.setBorder(javax.swing.BorderFactory.createTitledBorder("Slow Pairwise Options"));

        lblCWPWProtW.setText("Protein Weight Matrix:");

        lblCWPWSGapOpen.setText("Gap Open:");

        lblCWPWGapExt.setText("Gap Extension:");

        comboCWPWProteW.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BLOSUM", "PAM", "Gonnet", "ID" }));
        comboCWPWProteW.setSelectedIndex(2);
        comboCWPWProteW.setToolTipText("Slow pairwise alignment protein sequence comparison matrix series used to score alignment. Default value is: Gonnet [gonnet]");

        comboCWPWGapOpen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "50", "25", "10", "5", "2", "1" }));
        comboCWPWGapOpen.setSelectedIndex(3);
        comboCWPWGapOpen.setToolTipText("Slow pairwise alignment score for the first residue in a gap. Default value is: 10");

        comboCWPWGapExt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.05", "0.1", "0.5", "1.0", "2.5", "5.0", "7.5", "10.0" }));
        comboCWPWGapExt.setSelectedIndex(1);
        comboCWPWGapExt.setToolTipText("Slow pairwise alignment score for each additional residue in a gap. Default value is: 0.1");

        javax.swing.GroupLayout painelCWPWSlowLayout = new javax.swing.GroupLayout(painelCWPWSlow);
        painelCWPWSlow.setLayout(painelCWPWSlowLayout);
        painelCWPWSlowLayout.setHorizontalGroup(
            painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWPWSlowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCWPWProtW, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWPWSGapOpen, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWPWGapExt, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboCWPWProteW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWPWGapOpen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWPWGapExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelCWPWSlowLayout.setVerticalGroup(
            painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWPWSlowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWProtW)
                    .addComponent(comboCWPWProteW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWSGapOpen)
                    .addComponent(comboCWPWGapOpen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWSlowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWGapExt)
                    .addComponent(comboCWPWGapExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelCWPWFast.setBackground(new java.awt.Color(255, 204, 204));
        painelCWPWFast.setBorder(javax.swing.BorderFactory.createTitledBorder("Fast Pairwise Options"));

        lblCWPWKTUP.setText("KTUP (Word Size):");

        lblCWPWWinLen.setText("Window Length:");

        lblCWPWScoreT.setText("Score Type:");

        lblCWPWTopDiags.setText("Top Diags:");

        lblCWPWPairG.setText("Pair Gap:");

        comboCWPWKTUP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        comboCWPWKTUP.setToolTipText("Fast pairwise alignment word size used to find matches between the sequences. Decrease for sensitivity; increase for speed. Default value is: 1");

        comboCWPWWinLen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0" }));
        comboCWPWWinLen.setSelectedIndex(5);
        comboCWPWWinLen.setToolTipText("Fast pairwise alignment window size for joining word matches. Decrease for speed; increase for sensitivity. Default value is: 5");

        comboCWPWScoreT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "percent", "absolut" }));
        comboCWPWScoreT.setToolTipText("Fast pairwise alignment score type to output. Default value is: percent");

        comboCWPWTopDiags.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "9", "8", "7", "6", "5", "4", "3", "2", "1" }));
        comboCWPWTopDiags.setSelectedIndex(5);
        comboCWPWTopDiags.setToolTipText("Fast pairwise alignment number of match regions are used to create the pairwise alignment. Decrease for speed; increase for sensitivity. Default value is: 5");

        comboCWPWPairG.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "10", "25", "50", "100", "250", "500" }));
        comboCWPWPairG.setSelectedIndex(2);
        comboCWPWPairG.setToolTipText("Fast pairwise alignment gap penalty for each gap created. Default value is: 3");

        javax.swing.GroupLayout painelCWPWFastLayout = new javax.swing.GroupLayout(painelCWPWFast);
        painelCWPWFast.setLayout(painelCWPWFastLayout);
        painelCWPWFastLayout.setHorizontalGroup(
            painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWPWFastLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCWPWKTUP, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWPWWinLen, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWPWScoreT, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWPWTopDiags, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWPWPairG, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboCWPWKTUP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWPWWinLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWPWScoreT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWPWTopDiags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWPWPairG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelCWPWFastLayout.setVerticalGroup(
            painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWPWFastLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWKTUP)
                    .addComponent(comboCWPWKTUP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWWinLen)
                    .addComponent(comboCWPWWinLen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWScoreT)
                    .addComponent(comboCWPWScoreT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWTopDiags)
                    .addComponent(comboCWPWTopDiags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWPWFastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWPWPairG)
                    .addComponent(comboCWPWPairG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelCWPWLayout = new javax.swing.GroupLayout(painelCWPW);
        painelCWPW.setLayout(painelCWPWLayout);
        painelCWPWLayout.setHorizontalGroup(
            painelCWPWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWPWLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWPWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(painelCWPWFast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelCWPWLayout.createSequentialGroup()
                        .addComponent(lblCWType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radioCWSlow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioCWFast))
                    .addComponent(painelCWPWSlow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelCWPWLayout.setVerticalGroup(
            painelCWPWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWPWLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWPWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWType)
                    .addComponent(radioCWSlow)
                    .addComponent(radioCWFast))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelCWPWSlow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelCWPWFast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        painelCWM.setBackground(new java.awt.Color(255, 204, 204));
        painelCWM.setBorder(javax.swing.BorderFactory.createTitledBorder("Multiple Sequence Aligment"));

        lblCWMProtW.setText("Protein Weight Matrix:");

        lblCWMGapOpen.setText("Gap Open:");

        lblCWMGapExt.setText("Gap Extension:");

        lblCWMGatDist.setText("Gap Distances:");

        checkCWMNoEndGaps.setText("No End Gaps");
        checkCWMNoEndGaps.setToolTipText("Multiple alignment disable the gap seperation penalty when scoring gaps the the ends of the alignment. Default value is: no [false]");

        lblCWMIter.setText("Iteration:");

        lblCWMNumIter.setText("Num. Iterations:");

        lblCWMClust.setText("Clustering:");

        lblCWMOrder.setText("Order:");

        lblCWMOutputF.setText("Output Format:");
        lblCWMOutputF.setToolTipText("");

        comboCWMProtW.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BLOSUM", "PAM", "Gonnet", "ID" }));
        comboCWMProtW.setSelectedIndex(2);
        comboCWMProtW.setToolTipText("Multiple alignment protein sequence comparison matrix series used to score the alignment. Default value is: Gonnet [gonnet]");

        comboCWMGapOpen.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "50", "25", "10", "5", "2", "1" }));
        comboCWMGapOpen.setSelectedIndex(3);
        comboCWMGapOpen.setToolTipText("Multiple alignment penalty for the first residue in a gap. Default value is: 10");

        comboCWMGapExt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.05", "0.2", "0.5", "1.0", "2.5", "5.0", "7.5", "10.0" }));
        comboCWMGapExt.setSelectedIndex(1);
        comboCWMGapExt.setToolTipText("Multiple alignment penalty for each additional residue in a gap. Default value is: 0.2");

        comboCWMGapDist.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "9", "8", "7", "6", "5", "4", "3", "2", "1" }));
        comboCWMGapDist.setSelectedIndex(5);
        comboCWMGapDist.setToolTipText("Multiple alignment gaps that are closer together than this distance are penalised. Default value is: 5");

        comboCWMIter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Tree", "Aligment" }));
        comboCWMIter.setToolTipText("Multiple alignment improvement iteration type. Default value is: none");

        comboCWMNumIter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        comboCWMNumIter.setToolTipText("Maximum number of iterations to perform. Default value is: 1");

        comboCWMClust.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NJ", "UPGMA" }));
        comboCWMClust.setToolTipText("Clustering type. Default value is: NJ");

        comboCWMOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aligned", "Input" }));
        comboCWMOrder.setToolTipText("The order in which the sequences appear in the final alignment. Default value is: aligned");

        comboCWMOutputF.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Clustal without numbers", "Clustal with numbers", "GCG MSF", "Pearson/FASTA", "PHYLIP", "NEXUS", "NBRF/PIR", "GDE" }));
        comboCWMOutputF.setSelectedIndex(1);
        comboCWMOutputF.setToolTipText("Format for generated multiple sequence alignment. Default value is: Clustal w/ numbers [aln1]");

        javax.swing.GroupLayout painelCWMLayout = new javax.swing.GroupLayout(painelCWM);
        painelCWM.setLayout(painelCWMLayout);
        painelCWMLayout.setHorizontalGroup(
            painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCWMOutputF)
                    .addComponent(lblCWMProtW)
                    .addComponent(lblCWMGapOpen)
                    .addComponent(lblCWMGapExt)
                    .addComponent(lblCWMGatDist)
                    .addComponent(lblCWMIter)
                    .addComponent(lblCWMNumIter)
                    .addComponent(lblCWMClust)
                    .addComponent(lblCWMOrder)
                    .addComponent(checkCWMNoEndGaps))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboCWMProtW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMGapOpen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMGapExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMGapDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMNumIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMClust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCWMOutputF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelCWMLayout.setVerticalGroup(
            painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelCWMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMProtW)
                    .addComponent(comboCWMProtW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMGapOpen)
                    .addComponent(comboCWMGapOpen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMGapExt)
                    .addComponent(comboCWMGapExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMGatDist)
                    .addComponent(comboCWMGapDist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkCWMNoEndGaps)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMIter)
                    .addComponent(comboCWMIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMNumIter)
                    .addComponent(comboCWMNumIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMClust)
                    .addComponent(comboCWMClust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMOrder)
                    .addComponent(comboCWMOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelCWMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWMOutputF)
                    .addComponent(comboCWMOutputF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnCWPadrao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/report.png"))); // NOI18N
        btnCWPadrao.setText("Padrão");
        btnCWPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCWPadraoActionPerformed(evt);
            }
        });

        btnCWAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/help.png"))); // NOI18N
        btnCWAjuda.setText("Ajuda EMBL-EBI");
        btnCWAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCWAjudaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelConfCWLayout = new javax.swing.GroupLayout(painelConfCW);
        painelConfCW.setLayout(painelConfCWLayout);
        painelConfCWLayout.setHorizontalGroup(
            painelConfCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfCWLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelCWPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelCWM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConfCWLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCWPadrao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCWAjuda)))
                .addContainerGap())
        );
        painelConfCWLayout.setVerticalGroup(
            painelConfCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfCWLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelConfCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelConfCWLayout.createSequentialGroup()
                        .addComponent(painelCWPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(painelConfCWLayout.createSequentialGroup()
                        .addComponent(painelCWM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelConfCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCWAjuda)
                            .addComponent(btnCWPadrao))))
                .addContainerGap())
        );

        painelConfM.setBackground(new java.awt.Color(204, 255, 204));
        painelConfM.setBorder(javax.swing.BorderFactory.createTitledBorder("MUSCLE"));

        lblMOutputTree.setText("Output Tree:");

        lblMOutputF.setText("Output Format:");
        lblMOutputF.setToolTipText("");

        comboMOutputTree.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "From first iteration", "From second iteration" }));
        comboMOutputTree.setToolTipText("The guide tree to output. Default value is: none");

        comboMOutputF.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pearson/FASTA", "ClustalW", "ClustalW (strict)", "HTML", "GCG MSF", "Phylip interleaved", "Phylip sequential" }));
        comboMOutputF.setSelectedIndex(1);
        comboMOutputF.setToolTipText("Format for generated multiple sequence alignment. Default value is: ClustalW [clw]");

        btnMPadrao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/report.png"))); // NOI18N
        btnMPadrao.setText("Padrão");
        btnMPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMPadraoActionPerformed(evt);
            }
        });

        btnMAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/help.png"))); // NOI18N
        btnMAjuda.setText("Ajuda EMBL-EBI");
        btnMAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMAjudaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelConfMLayout = new javax.swing.GroupLayout(painelConfM);
        painelConfM.setLayout(painelConfMLayout);
        painelConfMLayout.setHorizontalGroup(
            painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConfMLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMPadrao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMAjuda)
                .addContainerGap())
            .addGroup(painelConfMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMOutputF)
                    .addComponent(lblMOutputTree))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboMOutputTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMOutputF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelConfMLayout.setVerticalGroup(
            painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMOutputTree)
                    .addComponent(comboMOutputTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMOutputF)
                    .addComponent(comboMOutputF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelConfMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMAjuda)
                    .addComponent(btnMPadrao))
                .addContainerGap())
        );

        btnOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/accept.png"))); // NOI18N
        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/delete.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelBaixoLayout = new javax.swing.GroupLayout(painelBaixo);
        painelBaixo.setLayout(painelBaixoLayout);
        painelBaixoLayout.setHorizontalGroup(
            painelBaixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelBaixoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar)
                .addContainerGap())
        );
        painelBaixoLayout.setVerticalGroup(
            painelBaixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelBaixoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnOK)
                .addComponent(btnCancelar))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelBaixo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(painelConfCO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelConfCW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelConfM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(176, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelConfCW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelConfCO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelConfM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelBaixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1361, 586));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCOAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCOAjudaActionPerformed
        
        if ( Desktop.isDesktopSupported() ) {
            try {             
                Desktop.getDesktop().browse( new URI( "http://www.ebi.ac.uk/Tools/msa/clustalo/help/" ) );
            } catch ( IOException | URISyntaxException exc ) {
                Utils.showExceptionMessage( this, exc );
            }
        }
        
    }//GEN-LAST:event_btnCOAjudaActionPerformed

    private void btnCWAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCWAjudaActionPerformed
        
        if ( Desktop.isDesktopSupported() ) {
            try {             
                Desktop.getDesktop().browse( new URI( "http://www.ebi.ac.uk/Tools/msa/clustalw2/help/" ) );
            } catch ( IOException | URISyntaxException exc ) {
                Utils.showExceptionMessage( this, exc );
            }
        }
        
    }//GEN-LAST:event_btnCWAjudaActionPerformed

    private void btnMAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMAjudaActionPerformed
        
        if ( Desktop.isDesktopSupported() ) {
            try {             
                Desktop.getDesktop().browse( new URI( "http://www.ebi.ac.uk/Tools/msa/muscle/help/" ) );
            } catch ( IOException | URISyntaxException exc ) {
                Utils.showExceptionMessage( this, exc );
            }
        }
        
    }//GEN-LAST:event_btnMAjudaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnCOPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCOPadraoActionPerformed
        
        checkCODealign.setSelected( Boolean.valueOf( defaultConfigs.getProperty( "coDIS" ) ) );
        checkCOClusteringGuide.setSelected( Boolean.valueOf( defaultConfigs.getProperty( "coMbedCGT" ) ) );
        checkCOClusteringIteration.setSelected( Boolean.valueOf( defaultConfigs.getProperty( "coMbedCI" ) ) );
        
        comboCOCombIter.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "coNCI" ) ) );
        comboCOMaxGuide.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "coMGTI" ) ) );
        comboCOHMM.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "coMHMMI" ) ) );
        comboCOOrder.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "coO" ) ) );
        comboCOOutputF.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "coOF" ) ) );
        
    }//GEN-LAST:event_btnCOPadraoActionPerformed

    private void btnCWPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCWPadraoActionPerformed
        
        if ( defaultConfigs.getProperty( "cwPWT" ).equals( "slow" ) ) {
            radioCWSlow.setSelected( true );
        } else {
            radioCWFast.setSelected( true );
        }
        
        comboCWPWProteW.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWSPWM" ) ) );
        comboCWPWGapOpen.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWSGO" ) ) );
        comboCWPWGapExt.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWSGE" ) ) );

        comboCWPWKTUP.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWFKTUP" ) ) );
        comboCWPWWinLen.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWFWL" ) ) );
        comboCWPWScoreT.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWFST" ) ) );
        comboCWPWTopDiags.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWFTD" ) ) );
        comboCWPWPairG.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwPWFPG" ) ) );

        comboCWMProtW.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMPWM" ) ) );
        comboCWMGapOpen.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMGO" ) ) );
        comboCWMGapExt.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMGE" ) ) );
        comboCWMGapDist.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMGD" ) ) );
        checkCWMNoEndGaps.setSelected( Boolean.valueOf( defaultConfigs.getProperty( "cwMNEG" ) ) );
        comboCWMIter.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMI" ) ) );
        comboCWMNumIter.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMNI" ) ) );
        comboCWMClust.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMC" ) ) );
        comboCWMOrder.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMO" ) ) );
        comboCWMOutputF.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "cwMOF" ) ) );
        
    }//GEN-LAST:event_btnCWPadraoActionPerformed

    private void btnMPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMPadraoActionPerformed
        
        comboMOutputTree.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "mMOT" ) ) );
        comboMOutputF.setSelectedIndex( Integer.parseInt( defaultConfigs.getProperty( "mMOF" ) ) );
        
    }//GEN-LAST:event_btnMPadraoActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        
        configs.setProperty( "coDIS", String.valueOf( checkCODealign.isSelected() ) );
        configs.setProperty( "coMbedCGT", String.valueOf( checkCOClusteringGuide.isSelected() ) );
        configs.setProperty( "coMbedCI", String.valueOf( checkCOClusteringIteration.isSelected() ) );
        
        configs.setProperty( "coNCI", String.valueOf( comboCOCombIter.getSelectedIndex() ) );
        configs.setProperty( "coMGTI", String.valueOf( comboCOMaxGuide.getSelectedIndex() ) );
        configs.setProperty( "coMHMMI", String.valueOf( comboCOHMM.getSelectedIndex() ) );
        configs.setProperty( "coO", String.valueOf( comboCOOrder.getSelectedIndex() ) );
        configs.setProperty( "coOF", String.valueOf( comboCOOutputF.getSelectedIndex() ) );
        
        if ( radioCWSlow.isSelected() ) {
            configs.setProperty( "cwPWT", "slow" );
        } else {
            configs.setProperty( "cwPWT", "fast" );
        }
        
        configs.setProperty( "cwPWSPWM", String.valueOf( comboCWPWProteW.getSelectedIndex() ) );
        configs.setProperty( "cwPWSGO", String.valueOf( comboCWPWGapOpen.getSelectedIndex() ) );
        configs.setProperty( "cwPWSGE", String.valueOf( comboCWPWGapExt.getSelectedIndex() ) );

        configs.setProperty( "cwPWFKTUP", String.valueOf( comboCWPWKTUP.getSelectedIndex() ) );
        configs.setProperty( "cwPWFWL", String.valueOf( comboCWPWWinLen.getSelectedIndex() ) );
        configs.setProperty( "cwPWFST", String.valueOf( comboCWPWScoreT.getSelectedIndex() ) );
        configs.setProperty( "cwPWFTD", String.valueOf( comboCWPWTopDiags.getSelectedIndex() ) );
        configs.setProperty( "cwPWFPG", String.valueOf( comboCWPWPairG.getSelectedIndex() ) );

        configs.setProperty( "cwMPWM", String.valueOf( comboCWMProtW.getSelectedIndex() ) );
        configs.setProperty( "cwMGO", String.valueOf( comboCWMGapOpen.getSelectedIndex() ) );
        configs.setProperty( "cwMGE", String.valueOf( comboCWMGapExt.getSelectedIndex() ) );
        configs.setProperty( "cwMGD", String.valueOf( comboCWMGapDist.getSelectedIndex() ) );
        configs.setProperty( "cwMNEG", String.valueOf( checkCWMNoEndGaps.isSelected() ) );
        configs.setProperty( "cwMI", String.valueOf( comboCWMIter.getSelectedIndex() ) );
        configs.setProperty( "cwMNI", String.valueOf( comboCWMNumIter.getSelectedIndex() ) );
        configs.setProperty( "cwMC", String.valueOf( comboCWMClust.getSelectedIndex() ) );
        configs.setProperty( "cwMO", String.valueOf( comboCWMOrder.getSelectedIndex() ) );
        configs.setProperty( "cwMOF", String.valueOf( comboCWMOutputF.getSelectedIndex() ) );
        
        configs.setProperty( "mMOT", String.valueOf( comboMOutputTree.getSelectedIndex() ) );
        configs.setProperty( "mMOF", String.valueOf( comboMOutputF.getSelectedIndex() ) );
        
        try {
            configs.store( new FileOutputStream( "conf/conf.properties" ), "Arquivo de Configuração do CryGetter - Não deve ser alterado manualmente!!!" );
            dispose();
        } catch ( IOException ex ) {
            Utils.showExceptionMessage( this, ex );
            System.exit( 1 );
        }
        
    }//GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCOAjuda;
    private javax.swing.JButton btnCOPadrao;
    private javax.swing.JButton btnCWAjuda;
    private javax.swing.JButton btnCWPadrao;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnMAjuda;
    private javax.swing.JButton btnMPadrao;
    private javax.swing.JButton btnOK;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkCOClusteringGuide;
    private javax.swing.JCheckBox checkCOClusteringIteration;
    private javax.swing.JCheckBox checkCODealign;
    private javax.swing.JCheckBox checkCWMNoEndGaps;
    private javax.swing.JComboBox comboCOCombIter;
    private javax.swing.JComboBox comboCOHMM;
    private javax.swing.JComboBox comboCOMaxGuide;
    private javax.swing.JComboBox comboCOOrder;
    private javax.swing.JComboBox comboCOOutputF;
    private javax.swing.JComboBox comboCWMClust;
    private javax.swing.JComboBox comboCWMGapDist;
    private javax.swing.JComboBox comboCWMGapExt;
    private javax.swing.JComboBox comboCWMGapOpen;
    private javax.swing.JComboBox comboCWMIter;
    private javax.swing.JComboBox comboCWMNumIter;
    private javax.swing.JComboBox comboCWMOrder;
    private javax.swing.JComboBox comboCWMOutputF;
    private javax.swing.JComboBox comboCWMProtW;
    private javax.swing.JComboBox comboCWPWGapExt;
    private javax.swing.JComboBox comboCWPWGapOpen;
    private javax.swing.JComboBox comboCWPWKTUP;
    private javax.swing.JComboBox comboCWPWPairG;
    private javax.swing.JComboBox comboCWPWProteW;
    private javax.swing.JComboBox comboCWPWScoreT;
    private javax.swing.JComboBox comboCWPWTopDiags;
    private javax.swing.JComboBox comboCWPWWinLen;
    private javax.swing.JComboBox comboMOutputF;
    private javax.swing.JComboBox comboMOutputTree;
    private javax.swing.JLabel lblCOCombIter;
    private javax.swing.JLabel lblCOHMM;
    private javax.swing.JLabel lblCOMaxGuide;
    private javax.swing.JLabel lblCOOrder;
    private javax.swing.JLabel lblCOOutputF;
    private javax.swing.JLabel lblCWMClust;
    private javax.swing.JLabel lblCWMGapExt;
    private javax.swing.JLabel lblCWMGapOpen;
    private javax.swing.JLabel lblCWMGatDist;
    private javax.swing.JLabel lblCWMIter;
    private javax.swing.JLabel lblCWMNumIter;
    private javax.swing.JLabel lblCWMOrder;
    private javax.swing.JLabel lblCWMOutputF;
    private javax.swing.JLabel lblCWMProtW;
    private javax.swing.JLabel lblCWPWGapExt;
    private javax.swing.JLabel lblCWPWKTUP;
    private javax.swing.JLabel lblCWPWPairG;
    private javax.swing.JLabel lblCWPWProtW;
    private javax.swing.JLabel lblCWPWSGapOpen;
    private javax.swing.JLabel lblCWPWScoreT;
    private javax.swing.JLabel lblCWPWTopDiags;
    private javax.swing.JLabel lblCWPWWinLen;
    private javax.swing.JLabel lblCWType;
    private javax.swing.JLabel lblMOutputF;
    private javax.swing.JLabel lblMOutputTree;
    private javax.swing.JPanel painelBaixo;
    private javax.swing.JPanel painelCWM;
    private javax.swing.JPanel painelCWPW;
    private javax.swing.JPanel painelCWPWFast;
    private javax.swing.JPanel painelCWPWSlow;
    private javax.swing.JPanel painelConfCO;
    private javax.swing.JPanel painelConfCW;
    private javax.swing.JPanel painelConfM;
    private javax.swing.JRadioButton radioCWFast;
    private javax.swing.JRadioButton radioCWSlow;
    // End of variables declaration//GEN-END:variables
}
