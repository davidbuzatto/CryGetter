/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package crygetter.gui;

import crygetter.model.CryToxin;
import crygetter.model.CryToxinDomain;
import crygetter.model.CryToxinSet;
import crygetter.model.SequenceInterval;
import crygetter.ncbi.prot.GBAuthor;
import crygetter.ncbi.prot.GBFeature;
import crygetter.ncbi.prot.GBKeyword;
import crygetter.ncbi.prot.GBQualifier;
import crygetter.ncbi.prot.GBReference;
import crygetter.ncbi.prot.GBSeq;
import crygetter.ncbi.prot.GBSet;
import crygetter.utils.Utils;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;

/**
 * Main window.
 * 
 * @author David Buzatto
 */
public class MainWindow extends javax.swing.JFrame {

    private List<CryToxin> ctList;
    private List<GBSeq> gbSeqList;
    private Map<CryToxin, GBSeq> correspondenceTable;
    
    private String day = "";
    private String month = "";
    private String year = "";
    private String hour = "";
    private String minute = "";
    private String second = "";
    private String size = "";
    
    private DefaultListModel<CryToxin> proteinListModel;
    private DefaultListModel<GBReference> referencesListModel;
    
    private CryToxin selectedCt;
    private GBSeq selectedSeq;
    
    /*private Color cD1 = Color.CYAN;
    private Color cD2 = Color.YELLOW;
    private Color cD3 = Color.MAGENTA;*/
    
    // n-terminus -> blue
    private Color cD1 = new Color( 172, 204, 234 );
    private Color cD2 = new Color( 175, 234, 170 );
    private Color cD3 = new Color( 247, 195, 159 );
    
    // protein list
    private Color baseProteinColor = new Color( 172, 187, 234 );
    
    // application configurations
    private Properties configs;
    private Properties defaultConfigs;
            
    /**
     * Creates new form JanelaPrincipal
     */
    public MainWindow() {
        
        initComponents();
        
        proteinListModel = new DefaultListModel<>();
        referencesListModel = new DefaultListModel<>();
        
        listaProteinas.setModel( proteinListModel );
        listaProteinas.setCellRenderer( new CryToxinListCellRenderer() );
        listaRef.setModel( referencesListModel );
        
        checkD1.setBackground( cD1 );
        checkD1.setOpaque( true );
        checkD2.setBackground(cD2 );
        checkD2.setOpaque( true );
        checkD3.setBackground(cD3 );
        checkD3.setOpaque( true );
        
        prepareConfiguration();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExtrairProteinas = new javax.swing.JButton();
        btnCarregarProteinas = new javax.swing.JButton();
        btnAlinhamento = new javax.swing.JButton();
        lblAguarde = new javax.swing.JLabel();
        painelProteinas = new javax.swing.JPanel();
        scrollProteinas = new javax.swing.JScrollPane();
        listaProteinas = new javax.swing.JList<CryToxin>();
        painelDetalhes = new javax.swing.JPanel();
        abasDetalhes = new javax.swing.JTabbedPane();
        painelDadosBt = new javax.swing.JPanel();
        lblNome = new javax.swing.JLabel();
        lblAccNo = new javax.swing.JLabel();
        lblIdProt = new javax.swing.JLabel();
        lblIdNuc = new javax.swing.JLabel();
        lblAut = new javax.swing.JLabel();
        lblAno = new javax.swing.JLabel();
        lblCepa = new javax.swing.JLabel();
        lblURLPrin = new javax.swing.JLabel();
        lblCom = new javax.swing.JLabel();
        fieldNome = new javax.swing.JTextField();
        fieldAccNo = new javax.swing.JTextField();
        fieldIdProt = new javax.swing.JTextField();
        fieldIdNuc = new javax.swing.JTextField();
        fieldAut = new javax.swing.JTextField();
        fieldAno = new javax.swing.JTextField();
        fieldCepa = new javax.swing.JTextField();
        linkURLPrin = new javax.swing.JLabel();
        spCom = new javax.swing.JScrollPane();
        areaCom = new javax.swing.JTextArea();
        painelNCBI = new javax.swing.JPanel();
        abasDetalhesNCBI = new javax.swing.JTabbedPane();
        painelPrincipalNCBI = new javax.swing.JPanel();
        painelPrincip01 = new javax.swing.JPanel();
        lblLocus = new javax.swing.JLabel();
        lblComp = new javax.swing.JLabel();
        lblTipo = new javax.swing.JLabel();
        lblTopo = new javax.swing.JLabel();
        lblDivi = new javax.swing.JLabel();
        lblCri = new javax.swing.JLabel();
        lblDef = new javax.swing.JLabel();
        lblAcessPri = new javax.swing.JLabel();
        lblVersaoAcess = new javax.swing.JLabel();
        fieldLocus = new javax.swing.JTextField();
        fieldComp = new javax.swing.JTextField();
        fieldTipo = new javax.swing.JTextField();
        fieldTopo = new javax.swing.JTextField();
        fieldDivi = new javax.swing.JTextField();
        fieldCri = new javax.swing.JTextField();
        fieldDef = new javax.swing.JTextField();
        fieldAcessPri = new javax.swing.JTextField();
        fieldVersaoAcess = new javax.swing.JTextField();
        painelPrincip02 = new javax.swing.JPanel();
        lblFonte = new javax.swing.JLabel();
        lblOrg = new javax.swing.JLabel();
        lblTaxo = new javax.swing.JLabel();
        lblBDF = new javax.swing.JLabel();
        lblPChaves = new javax.swing.JLabel();
        lblComent = new javax.swing.JLabel();
        fieldFonte = new javax.swing.JTextField();
        fieldOrg = new javax.swing.JTextField();
        fieldTaxo = new javax.swing.JTextField();
        fieldBDF = new javax.swing.JTextField();
        fieldPChaves = new javax.swing.JTextField();
        spComent = new javax.swing.JScrollPane();
        areaComent = new javax.swing.JTextArea();
        painelReferenciasNCBI = new javax.swing.JPanel();
        painelListaRef = new javax.swing.JPanel();
        spListaRef = new javax.swing.JScrollPane();
        listaRef = new javax.swing.JList();
        painelDetalhesRef = new javax.swing.JPanel();
        lblAutRef = new javax.swing.JLabel();
        lblTitRef = new javax.swing.JLabel();
        lblJournalRef = new javax.swing.JLabel();
        lblURLPubmedRef = new javax.swing.JLabel();
        fieldAutRef = new javax.swing.JTextField();
        fieldTitRef = new javax.swing.JTextField();
        fieldJournalRef = new javax.swing.JTextField();
        linkURLPubmedRef = new javax.swing.JLabel();
        painelSequenciasNCBI = new javax.swing.JPanel();
        abasSequenciasNCBI = new javax.swing.JTabbedPane();
        painelSequenciaCompleta = new javax.swing.JPanel();
        spSeqComp = new javax.swing.JScrollPane();
        areaSeqComp = new javax.swing.JTextPane();
        lblIntSeqComp = new javax.swing.JLabel();
        lblNomeSeqComp = new javax.swing.JLabel();
        fieldIntSeqComp = new javax.swing.JTextField();
        fieldNomeSeqComp = new javax.swing.JTextField();
        checkD1 = new javax.swing.JCheckBox();
        checkD2 = new javax.swing.JCheckBox();
        checkD3 = new javax.swing.JCheckBox();
        painelD1 = new javax.swing.JPanel();
        spD1 = new javax.swing.JScrollPane();
        areaD1 = new javax.swing.JTextArea();
        lblIntD1 = new javax.swing.JLabel();
        lblNamoD1 = new javax.swing.JLabel();
        lblComD1 = new javax.swing.JLabel();
        lblXrefD1 = new javax.swing.JLabel();
        fieldIntD1 = new javax.swing.JTextField();
        fieldNomeD1 = new javax.swing.JTextField();
        fieldComD1 = new javax.swing.JTextField();
        linkXrefD1 = new javax.swing.JLabel();
        painelD2 = new javax.swing.JPanel();
        spD2 = new javax.swing.JScrollPane();
        areaD2 = new javax.swing.JTextArea();
        lblIntD2 = new javax.swing.JLabel();
        lblNomeD2 = new javax.swing.JLabel();
        lblComD2 = new javax.swing.JLabel();
        lblXrefD2 = new javax.swing.JLabel();
        fieldIntD2 = new javax.swing.JTextField();
        fieldNomeD2 = new javax.swing.JTextField();
        fieldComD2 = new javax.swing.JTextField();
        linkXrefD2 = new javax.swing.JLabel();
        painelD3 = new javax.swing.JPanel();
        spD3 = new javax.swing.JScrollPane();
        areaD3 = new javax.swing.JTextArea();
        lblIntD3 = new javax.swing.JLabel();
        ldlNomeD3 = new javax.swing.JLabel();
        lblComD3 = new javax.swing.JLabel();
        lblXrefD3 = new javax.swing.JLabel();
        fieldIntD3 = new javax.swing.JTextField();
        fieldNomeD3 = new javax.swing.JTextField();
        fieldComD3 = new javax.swing.JTextField();
        linkXrefD3 = new javax.swing.JLabel();
        painelDadosExtr = new javax.swing.JPanel();
        labelDataExtr = new javax.swing.JLabel();
        labelQuantExtrBruta = new javax.swing.JLabel();
        labelQuantExtrProc = new javax.swing.JLabel();
        fieldDataExtr = new javax.swing.JTextField();
        fieldQuantExtrBruta = new javax.swing.JTextField();
        fieldQuantExtrProc = new javax.swing.JTextField();
        btnSobreProc = new javax.swing.JButton();
        painelConf = new javax.swing.JPanel();
        btnCor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryGetter");
        setResizable(false);

        btnExtrairProteinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/world_link.png"))); // NOI18N
        btnExtrairProteinas.setText("Extrair");
        btnExtrairProteinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtrairProteinasActionPerformed(evt);
            }
        });

        btnCarregarProteinas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/folder.png"))); // NOI18N
        btnCarregarProteinas.setText("Carregar");
        btnCarregarProteinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregarProteinasActionPerformed(evt);
            }
        });

        btnAlinhamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/shape_align_center.png"))); // NOI18N
        btnAlinhamento.setText("Alinhamento");
        btnAlinhamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlinhamentoActionPerformed(evt);
            }
        });

        lblAguarde.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAguarde.setForeground(new java.awt.Color(0, 102, 255));
        lblAguarde.setText(" ");

        painelProteinas.setBorder(javax.swing.BorderFactory.createTitledBorder("Proteínas"));

        listaProteinas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaProteinas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaProteinasValueChanged(evt);
            }
        });
        scrollProteinas.setViewportView(listaProteinas);

        javax.swing.GroupLayout painelProteinasLayout = new javax.swing.GroupLayout(painelProteinas);
        painelProteinas.setLayout(painelProteinasLayout);
        painelProteinasLayout.setHorizontalGroup(
            painelProteinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelProteinasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollProteinas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelProteinasLayout.setVerticalGroup(
            painelProteinasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelProteinasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollProteinas)
                .addContainerGap())
        );

        painelDetalhes.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalhes"));

        lblNome.setText("Nome:");

        lblAccNo.setText("Número de Acesso:");

        lblIdProt.setText("Id. Proteína NCBI:");

        lblIdNuc.setText("Id. Nucleotídeos NCBI:");

        lblAut.setText("Autores:");

        lblAno.setText("Ano:");

        lblCepa.setText("Cepa de Origem:");

        lblURLPrin.setText("URL Principal:");

        lblCom.setText("Comentários:");

        linkURLPrin.setForeground(new java.awt.Color(0, 0, 255));
        linkURLPrin.setText(" ");
        linkURLPrin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkURLPrin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkURLPrinMouseClicked(evt);
            }
        });

        areaCom.setColumns(20);
        areaCom.setRows(5);
        spCom.setViewportView(areaCom);

        javax.swing.GroupLayout painelDadosBtLayout = new javax.swing.GroupLayout(painelDadosBt);
        painelDadosBt.setLayout(painelDadosBtLayout);
        painelDadosBtLayout.setHorizontalGroup(
            painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDadosBtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblURLPrin, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblCepa, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblAut, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblAno, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblIdNuc, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblIdProt, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblAccNo, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblNome, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(lblCom, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAccNo, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spCom, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAno, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldCepa, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkURLPrin, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldIdProt, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldIdNuc, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAut, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        painelDadosBtLayout.setVerticalGroup(
            painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDadosBtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccNo)
                    .addComponent(fieldAccNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdProt)
                    .addComponent(fieldIdProt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdNuc)
                    .addComponent(fieldIdNuc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAut)
                    .addComponent(fieldAut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAno)
                    .addComponent(fieldAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCepa)
                    .addComponent(fieldCepa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblURLPrin)
                    .addComponent(linkURLPrin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosBtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDadosBtLayout.createSequentialGroup()
                        .addComponent(lblCom)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spCom, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addGap(31, 31, 31))
        );

        abasDetalhes.addTab("BtNomeclature", painelDadosBt);

        lblLocus.setText("Locus:");

        lblComp.setText("Comprimento:");

        lblTipo.setText("Tipo de Molécula:");

        lblTopo.setText("Topologia:");

        lblDivi.setText("Divisão:");

        lblCri.setText("Criação:");

        lblDef.setText("Definição:");

        lblAcessPri.setText("Acesso Primário:");

        lblVersaoAcess.setText("Versão do Acesso:");

        javax.swing.GroupLayout painelPrincip01Layout = new javax.swing.GroupLayout(painelPrincip01);
        painelPrincip01.setLayout(painelPrincip01Layout);
        painelPrincip01Layout.setHorizontalGroup(
            painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincip01Layout.createSequentialGroup()
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLocus, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblComp, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTipo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTopo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDivi, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCri, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDef, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAcessPri, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblVersaoAcess, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldLocus, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldDivi, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldCri, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldDef, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldAcessPri, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldVersaoAcess, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(fieldTipo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fieldTopo, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(fieldComp, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelPrincip01Layout.setVerticalGroup(
            painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincip01Layout.createSequentialGroup()
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLocus)
                    .addComponent(fieldLocus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblComp)
                    .addComponent(fieldComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(fieldTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTopo)
                    .addComponent(fieldTopo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDivi)
                    .addComponent(fieldDivi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCri)
                    .addComponent(fieldCri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDef)
                    .addComponent(fieldDef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAcessPri)
                    .addComponent(fieldAcessPri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVersaoAcess)
                    .addComponent(fieldVersaoAcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        lblFonte.setText("Fonte:");

        lblOrg.setText("Organismo:");

        lblTaxo.setText("Taxonomia:");

        lblBDF.setText("Banco de Dados Fonte:");

        lblPChaves.setText("Palavras-chave:");

        lblComent.setText("Comentários:");

        areaComent.setColumns(20);
        areaComent.setLineWrap(true);
        areaComent.setRows(5);
        spComent.setViewportView(areaComent);

        javax.swing.GroupLayout painelPrincip02Layout = new javax.swing.GroupLayout(painelPrincip02);
        painelPrincip02.setLayout(painelPrincip02Layout);
        painelPrincip02Layout.setHorizontalGroup(
            painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincip02Layout.createSequentialGroup()
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblComent)
                    .addComponent(lblFonte)
                    .addComponent(lblOrg)
                    .addComponent(lblTaxo)
                    .addComponent(lblBDF)
                    .addComponent(lblPChaves))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelPrincip02Layout.createSequentialGroup()
                        .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spComent, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldFonte, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldOrg, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(painelPrincip02Layout.createSequentialGroup()
                        .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fieldBDF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldTaxo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldPChaves, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        painelPrincip02Layout.setVerticalGroup(
            painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincip02Layout.createSequentialGroup()
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldFonte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFonte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrg)
                    .addComponent(fieldOrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTaxo)
                    .addComponent(fieldTaxo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBDF)
                    .addComponent(fieldBDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPChaves)
                    .addComponent(fieldPChaves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPrincip02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelPrincip02Layout.createSequentialGroup()
                        .addComponent(lblComent)
                        .addContainerGap())
                    .addComponent(spComent, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout painelPrincipalNCBILayout = new javax.swing.GroupLayout(painelPrincipalNCBI);
        painelPrincipalNCBI.setLayout(painelPrincipalNCBILayout);
        painelPrincipalNCBILayout.setHorizontalGroup(
            painelPrincipalNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincipalNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelPrincip01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelPrincip02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );
        painelPrincipalNCBILayout.setVerticalGroup(
            painelPrincipalNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPrincipalNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPrincipalNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelPrincip01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painelPrincip02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        abasDetalhesNCBI.addTab("Principal", painelPrincipalNCBI);

        painelListaRef.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista"));

        listaRef.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaRef.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaRefValueChanged(evt);
            }
        });
        spListaRef.setViewportView(listaRef);

        javax.swing.GroupLayout painelListaRefLayout = new javax.swing.GroupLayout(painelListaRef);
        painelListaRef.setLayout(painelListaRefLayout);
        painelListaRefLayout.setHorizontalGroup(
            painelListaRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelListaRefLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spListaRef, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelListaRefLayout.setVerticalGroup(
            painelListaRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelListaRefLayout.createSequentialGroup()
                .addComponent(spListaRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        painelDetalhesRef.setBorder(javax.swing.BorderFactory.createTitledBorder("Detlahes"));

        lblAutRef.setText("Autores:");

        lblTitRef.setText("Título:");

        lblJournalRef.setText("Journal:");

        lblURLPubmedRef.setText("PubMed:");

        linkURLPubmedRef.setForeground(new java.awt.Color(0, 0, 255));
        linkURLPubmedRef.setText(" ");
        linkURLPubmedRef.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkURLPubmedRef.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkURLPubmedRefMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelDetalhesRefLayout = new javax.swing.GroupLayout(painelDetalhesRef);
        painelDetalhesRef.setLayout(painelDetalhesRefLayout);
        painelDetalhesRefLayout.setHorizontalGroup(
            painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDetalhesRefLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAutRef, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitRef, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblJournalRef, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblURLPubmedRef, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldAutRef, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldTitRef, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldJournalRef, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkURLPubmedRef, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelDetalhesRefLayout.setVerticalGroup(
            painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDetalhesRefLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAutRef)
                    .addComponent(fieldAutRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitRef)
                    .addComponent(fieldTitRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblJournalRef)
                    .addComponent(fieldJournalRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDetalhesRefLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblURLPubmedRef)
                    .addComponent(linkURLPubmedRef))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painelReferenciasNCBILayout = new javax.swing.GroupLayout(painelReferenciasNCBI);
        painelReferenciasNCBI.setLayout(painelReferenciasNCBILayout);
        painelReferenciasNCBILayout.setHorizontalGroup(
            painelReferenciasNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelReferenciasNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelListaRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelDetalhesRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        painelReferenciasNCBILayout.setVerticalGroup(
            painelReferenciasNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelReferenciasNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelReferenciasNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelListaRef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelDetalhesRef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(203, Short.MAX_VALUE))
        );

        abasDetalhesNCBI.addTab("Referências", painelReferenciasNCBI);

        areaSeqComp.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        spSeqComp.setViewportView(areaSeqComp);

        lblIntSeqComp.setText("Intervalo:");

        lblNomeSeqComp.setText("Nome:");

        checkD1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkD1.setText("Domínio 1");
        checkD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkD1ActionPerformed(evt);
            }
        });

        checkD2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkD2.setText("Domínio 2");
        checkD2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkD2ActionPerformed(evt);
            }
        });

        checkD3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkD3.setText("Domínio 3");
        checkD3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkD3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelSequenciaCompletaLayout = new javax.swing.GroupLayout(painelSequenciaCompleta);
        painelSequenciaCompleta.setLayout(painelSequenciaCompletaLayout);
        painelSequenciaCompletaLayout.setHorizontalGroup(
            painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSequenciaCompletaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spSeqComp, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNomeSeqComp)
                    .addComponent(lblIntSeqComp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldIntSeqComp, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldNomeSeqComp, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkD1)
                    .addComponent(checkD2)
                    .addComponent(checkD3))
                .addGap(51, 51, 51))
        );
        painelSequenciaCompletaLayout.setVerticalGroup(
            painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSequenciaCompletaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelSequenciaCompletaLayout.createSequentialGroup()
                        .addGroup(painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldIntSeqComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIntSeqComp))
                        .addGap(8, 8, 8)
                        .addGroup(painelSequenciaCompletaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNomeSeqComp)
                            .addComponent(fieldNomeSeqComp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkD1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkD2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkD3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spSeqComp, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                .addContainerGap())
        );

        abasSequenciasNCBI.addTab("Proteína Completa", painelSequenciaCompleta);

        areaD1.setColumns(20);
        areaD1.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        areaD1.setRows(5);
        spD1.setViewportView(areaD1);

        lblIntD1.setText("Intervalo:");

        lblNamoD1.setText("Nome:");

        lblComD1.setText("Comentário:");

        lblXrefD1.setText("X-Ref:");

        linkXrefD1.setForeground(new java.awt.Color(0, 0, 255));
        linkXrefD1.setText(" ");
        linkXrefD1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkXrefD1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkXrefD1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelD1Layout = new javax.swing.GroupLayout(painelD1);
        painelD1.setLayout(painelD1Layout);
        painelD1Layout.setHorizontalGroup(
            painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelD1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spD1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblIntD1)
                    .addComponent(lblNamoD1)
                    .addComponent(lblComD1)
                    .addComponent(lblXrefD1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldIntD1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldNomeD1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldComD1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkXrefD1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        painelD1Layout.setVerticalGroup(
            painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelD1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelD1Layout.createSequentialGroup()
                        .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldIntD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIntD1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNamoD1)
                            .addComponent(fieldNomeD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblComD1)
                            .addComponent(fieldComD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblXrefD1)
                            .addComponent(linkXrefD1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spD1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                .addContainerGap())
        );

        abasSequenciasNCBI.addTab("Domínio 1", painelD1);

        areaD2.setColumns(20);
        areaD2.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        areaD2.setRows(5);
        spD2.setViewportView(areaD2);

        lblIntD2.setText("Intervalo:");

        lblNomeD2.setText("Nome:");

        lblComD2.setText("Comentário:");

        lblXrefD2.setText("X-Ref:");

        linkXrefD2.setForeground(new java.awt.Color(0, 0, 255));
        linkXrefD2.setText(" ");
        linkXrefD2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkXrefD2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkXrefD2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelD2Layout = new javax.swing.GroupLayout(painelD2);
        painelD2.setLayout(painelD2Layout);
        painelD2Layout.setHorizontalGroup(
            painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelD2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spD2, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelD2Layout.createSequentialGroup()
                        .addComponent(lblIntD2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldIntD2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelD2Layout.createSequentialGroup()
                        .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblNomeD2)
                            .addComponent(lblComD2)
                            .addComponent(lblXrefD2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldNomeD2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldComD2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(linkXrefD2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        painelD2Layout.setVerticalGroup(
            painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelD2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelD2Layout.createSequentialGroup()
                        .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldIntD2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIntD2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNomeD2)
                            .addComponent(fieldNomeD2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblComD2)
                            .addComponent(fieldComD2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblXrefD2)
                            .addComponent(linkXrefD2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spD2, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                .addContainerGap())
        );

        abasSequenciasNCBI.addTab("Domínio 2", painelD2);

        areaD3.setColumns(20);
        areaD3.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        areaD3.setRows(5);
        spD3.setViewportView(areaD3);

        lblIntD3.setText("Intervalo:");

        ldlNomeD3.setText("Nome:");

        lblComD3.setText("Comentário:");

        lblXrefD3.setText("X-Ref:");

        linkXrefD3.setForeground(new java.awt.Color(0, 0, 255));
        linkXrefD3.setText(" ");
        linkXrefD3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkXrefD3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkXrefD3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout painelD3Layout = new javax.swing.GroupLayout(painelD3);
        painelD3.setLayout(painelD3Layout);
        painelD3Layout.setHorizontalGroup(
            painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelD3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spD3, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelD3Layout.createSequentialGroup()
                        .addComponent(lblIntD3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldIntD3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelD3Layout.createSequentialGroup()
                        .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ldlNomeD3)
                            .addComponent(lblComD3)
                            .addComponent(lblXrefD3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldNomeD3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldComD3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(linkXrefD3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        painelD3Layout.setVerticalGroup(
            painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelD3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelD3Layout.createSequentialGroup()
                        .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldIntD3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIntD3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ldlNomeD3)
                            .addComponent(fieldNomeD3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblComD3)
                            .addComponent(fieldComD3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelD3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblXrefD3)
                            .addComponent(linkXrefD3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spD3, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                .addContainerGap())
        );

        abasSequenciasNCBI.addTab("Domínio 3", painelD3);

        javax.swing.GroupLayout painelSequenciasNCBILayout = new javax.swing.GroupLayout(painelSequenciasNCBI);
        painelSequenciasNCBI.setLayout(painelSequenciasNCBILayout);
        painelSequenciasNCBILayout.setHorizontalGroup(
            painelSequenciasNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSequenciasNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abasSequenciasNCBI)
                .addContainerGap())
        );
        painelSequenciasNCBILayout.setVerticalGroup(
            painelSequenciasNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSequenciasNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abasSequenciasNCBI)
                .addContainerGap())
        );

        abasDetalhesNCBI.addTab("Sequência", painelSequenciasNCBI);

        javax.swing.GroupLayout painelNCBILayout = new javax.swing.GroupLayout(painelNCBI);
        painelNCBI.setLayout(painelNCBILayout);
        painelNCBILayout.setHorizontalGroup(
            painelNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abasDetalhesNCBI, javax.swing.GroupLayout.PREFERRED_SIZE, 867, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelNCBILayout.setVerticalGroup(
            painelNCBILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelNCBILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abasDetalhesNCBI)
                .addContainerGap())
        );

        abasDetalhes.addTab("NCBI", painelNCBI);

        javax.swing.GroupLayout painelDetalhesLayout = new javax.swing.GroupLayout(painelDetalhes);
        painelDetalhes.setLayout(painelDetalhesLayout);
        painelDetalhesLayout.setHorizontalGroup(
            painelDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abasDetalhes)
                .addContainerGap())
        );
        painelDetalhesLayout.setVerticalGroup(
            painelDetalhesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDetalhesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abasDetalhes)
                .addContainerGap())
        );

        painelDadosExtr.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Extração"));

        labelDataExtr.setText("Data:");

        labelQuantExtrBruta.setText("Quantidade Bruta:");

        labelQuantExtrProc.setText("Quantidade Proc.:");

        btnSobreProc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/help.png"))); // NOI18N
        btnSobreProc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSobreProcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelDadosExtrLayout = new javax.swing.GroupLayout(painelDadosExtr);
        painelDadosExtr.setLayout(painelDadosExtrLayout);
        painelDadosExtrLayout.setHorizontalGroup(
            painelDadosExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDadosExtrLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelDataExtr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldDataExtr, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelQuantExtrBruta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldQuantExtrBruta, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelQuantExtrProc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldQuantExtrProc, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSobreProc)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelDadosExtrLayout.setVerticalGroup(
            painelDadosExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDadosExtrLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelDadosExtrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDataExtr)
                    .addComponent(fieldDataExtr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelQuantExtrBruta)
                    .addComponent(fieldQuantExtrBruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelQuantExtrProc)
                    .addComponent(fieldQuantExtrProc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSobreProc)))
        );

        painelConf.setBorder(javax.swing.BorderFactory.createTitledBorder("Configurações"));

        btnCor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/crygetter/gui/icons/color_wheel.png"))); // NOI18N
        btnCor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelConfLayout = new javax.swing.GroupLayout(painelConf);
        painelConf.setLayout(painelConfLayout);
        painelConfLayout.setHorizontalGroup(
            painelConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConfLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCor)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelConfLayout.setVerticalGroup(
            painelConfLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConfLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCor))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelProteinas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExtrairProteinas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCarregarProteinas)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAlinhamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAguarde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelDetalhes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(painelDadosExtr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelConf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painelDadosExtr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExtrairProteinas)
                            .addComponent(btnCarregarProteinas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAlinhamento)
                            .addComponent(lblAguarde)))
                    .addComponent(painelConf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelDetalhes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelProteinas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1160, 624));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExtrairProteinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtrairProteinasActionPerformed
        new Thread( new ExtractionTask( ( this ) ) ).start();
    }//GEN-LAST:event_btnExtrairProteinasActionPerformed

    private void btnCarregarProteinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregarProteinasActionPerformed
        
        JFileChooser jfc = new JFileChooser();
        FileNameExtensionFilter fnef = new FileNameExtensionFilter( 
                "CryGetter Extraction (*.cgext)", "cgext" );

        for ( FileFilter f : jfc.getChoosableFileFilters() ) {
            jfc.removeChoosableFileFilter( f );
        }

        jfc.setFileFilter( fnef );
        jfc.setDialogTitle( "Carregar Dados Extraídos" );
        jfc.setFileSelectionMode( JFileChooser.FILES_ONLY );
        jfc.setMultiSelectionEnabled( false );
        
        if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
            new Thread( new LoadTask( this, jfc.getSelectedFile()) ).start();
        }
        
    }//GEN-LAST:event_btnCarregarProteinasActionPerformed

    private void linkURLPrinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkURLPrinMouseClicked
        
        if ( selectedCt != null ) {
            
            if ( Desktop.isDesktopSupported() ) {
                
                try {             
                    Desktop.getDesktop().browse( new URI( selectedCt.ncbiURL ) );
                } catch ( IOException | URISyntaxException exc ) {
                    Utils.showExceptionMessage( this, exc );
                }
            }
            
        }
        
    }//GEN-LAST:event_linkURLPrinMouseClicked

    private void listaProteinasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaProteinasValueChanged

        if ( listaProteinas != null ) {
            
            CryToxin selectedNow = (CryToxin) listaProteinas.getSelectedValue();

            if ( selectedNow != null && !selectedNow.equals( evt ) ) {
                selectedCt = (CryToxin) listaProteinas.getSelectedValue();
                updateDetails();
            }
            
        }
        
    }//GEN-LAST:event_listaProteinasValueChanged

    private void listaRefValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaRefValueChanged
        
        if ( listaRef != null ) {
            
            GBReference ref = (GBReference) listaRef.getSelectedValue();

            if ( ref != null ) {

                StringBuilder sbAut = new StringBuilder();

                if ( ref.getGBReferenceAuthors() != null ) {
                    for ( GBAuthor a : ref.getGBReferenceAuthors().getGBAuthor() ) {
                        sbAut.append( a.getvalue() ).append( "; " );
                    }
                }

                fieldAutRef.setText( sbAut.toString() );
                fieldTitRef.setText( ref.getGBReferenceTitle() );
                fieldJournalRef.setText( ref.getGBReferenceJournal() );

                if ( ref.getGBReferencePubmed() != null ) {
                    linkURLPubmedRef.setText( ref.getGBReferencePubmed() );
                }

            }
            
        }
        
    }//GEN-LAST:event_listaRefValueChanged

    private void linkURLPubmedRefMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkURLPubmedRefMouseClicked
        
        if ( !linkURLPubmedRef.getText().equals( " " ) ) {
            
            if ( Desktop.isDesktopSupported() ) {
                
                try {             
                    Desktop.getDesktop().browse( new URI( "http://www.ncbi.nlm.nih.gov/pubmed/" + linkURLPubmedRef.getText() ) );
                } catch ( IOException | URISyntaxException exc ) {
                    Utils.showExceptionMessage( this, exc );
                }
            }
            
        }
        
    }//GEN-LAST:event_linkURLPubmedRefMouseClicked

    private void btnSobreProcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSobreProcActionPerformed
        
        JOptionPane.showMessageDialog( this, 
                "As proteínas listadas foram processadas para que sejam apresentadas\n" +
                "apenas as que tenham as seguintes características:\n\n\n" +
                "- Identificação do BtNomenclature igual ao do NCBI, ou seja, o mesmo\n" +
                "  número de acesso tanto no BtNomenclature quanto no NCBI;\n\n" +
                "- Utilização da nomeclatura atual: Cry{1}{2}{3}{4}, onde\n" +
                "    1: Um número inteiro obrigatório\n" +
                "    2: Uma letra maiúscula obrigatória\n" +
                "    3: Uma letra minúscula obrigatória\n" +
                "    4: Um número inteiro não obrigatório\n\n" +
                "- Possuir exatamente três domínios.",
                "Detalhes do Processamento", 
                JOptionPane.INFORMATION_MESSAGE );
        
    }//GEN-LAST:event_btnSobreProcActionPerformed

    private void linkXrefD1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkXrefD1MouseClicked
        openDomainXRefLink( linkXrefD1 );
    }//GEN-LAST:event_linkXrefD1MouseClicked

    private void linkXrefD2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkXrefD2MouseClicked
        openDomainXRefLink( linkXrefD2 );
    }//GEN-LAST:event_linkXrefD2MouseClicked

    private void linkXrefD3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkXrefD3MouseClicked
        openDomainXRefLink( linkXrefD3 );
    }//GEN-LAST:event_linkXrefD3MouseClicked

    private void checkD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkD1ActionPerformed
        fillCompleteSequenceTextPane();
    }//GEN-LAST:event_checkD1ActionPerformed

    private void checkD2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkD2ActionPerformed
        fillCompleteSequenceTextPane();
    }//GEN-LAST:event_checkD2ActionPerformed

    private void checkD3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkD3ActionPerformed
        fillCompleteSequenceTextPane();
    }//GEN-LAST:event_checkD3ActionPerformed

    private void btnAlinhamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlinhamentoActionPerformed
        
        if ( ctList != null ) {
            
            AlignDialog ad = new AlignDialog( this, true, ctList, defaultConfigs, configs );
            ad.setVisible( true );
            
        } else {
            
            JOptionPane.showMessageDialog( this, "Carregue primeiro um arquivo de extração!", 
                    "Aviso", JOptionPane.WARNING_MESSAGE );
            
        }
        
    }//GEN-LAST:event_btnAlinhamentoActionPerformed

    private void btnCorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorActionPerformed
        
        JColorChooser jcc = new JColorChooser();
        Color c = JColorChooser.showDialog( this, "Cor Base", baseProteinColor );
        
        if ( c != null ) {
            
            baseProteinColor = c;
            configs.setProperty( "bpc", String.valueOf( baseProteinColor.getRGB() ) );
            
            try {
                configs.store( new FileOutputStream( "conf/conf.properties" ), "Arquivo de Configuração do CryGetter - Não deve ser alterado manualmente!!!" );
            } catch ( IOException ex ) {
                Utils.showExceptionMessage( this, ex );
                System.exit( 1 );
            }
            
            if ( ctList != null ) {
                updateProteinColors();
                listaProteinas.updateUI();
            }
        }
        
    }//GEN-LAST:event_btnCorActionPerformed

    private void prepareConfiguration() {
        
        configs = new Properties();
        defaultConfigs = new Properties();
        
        // creating default configs
        defaultConfigs.setProperty( "bpc", "-5504790" );

        defaultConfigs.setProperty( "coDIS", "false" );
        defaultConfigs.setProperty( "coMbedCGT", "true" );
        defaultConfigs.setProperty( "coMbedCI", "true" );
        defaultConfigs.setProperty( "coNCI", "0" );
        defaultConfigs.setProperty( "coMGTI", "0" );
        defaultConfigs.setProperty( "coMHMMI", "0" );
        defaultConfigs.setProperty( "coO", "0" );
        defaultConfigs.setProperty( "coOF", "0" );

        defaultConfigs.setProperty( "cwPWT", "slow" );
        defaultConfigs.setProperty( "cwPWSPWM", "2" );
        defaultConfigs.setProperty( "cwPWSGO", "3" );
        defaultConfigs.setProperty( "cwPWSGE", "1" );

        defaultConfigs.setProperty( "cwPWFKTUP", "0" );
        defaultConfigs.setProperty( "cwPWFWL", "5" );
        defaultConfigs.setProperty( "cwPWFST", "0" );
        defaultConfigs.setProperty( "cwPWFTD", "5" );
        defaultConfigs.setProperty( "cwPWFPG", "2" );

        defaultConfigs.setProperty( "cwMPWM", "2" );
        defaultConfigs.setProperty( "cwMGO", "3" );
        defaultConfigs.setProperty( "cwMGE", "1" );
        defaultConfigs.setProperty( "cwMGD", "5" );
        defaultConfigs.setProperty( "cwMNEG", "false" );
        defaultConfigs.setProperty( "cwMI", "0" );
        defaultConfigs.setProperty( "cwMNI", "0" );
        defaultConfigs.setProperty( "cwMC", "0" );
        defaultConfigs.setProperty( "cwMO", "0" );
        defaultConfigs.setProperty( "cwMOF", "1" );
        
        defaultConfigs.setProperty( "mMOT", "0" );
        defaultConfigs.setProperty( "mMOF", "1" );
        
        try {
            
            configs.load( new FileInputStream( "conf/conf.properties" ) );
            
            baseProteinColor = new Color( Integer.parseInt( configs.getProperty( "bpc" ) ) );
            
        } catch ( IOException exc ) {
            
            // properties not found... creating
            if ( exc instanceof FileNotFoundException ) {
                
                // loading default configuration into configs
                for ( String s : defaultConfigs.stringPropertyNames() ) {
                    configs.setProperty( s, defaultConfigs.getProperty( s ) );
                }
                
                try {
                    configs.store( new FileOutputStream( "conf/conf.properties" ), "Arquivo de Configuração do CryGetter - Não deve ser alterado manualmente!!!" );
                } catch ( IOException ex ) {
                    Utils.showExceptionMessage( this, ex );
                    System.exit( 1 );
                }
                
            }
            
        }
        
    }
    
    private void updateProteinColors() {
        
        // colors
        // getting all classes
        Set<String> cryPrefixSet = new LinkedHashSet<>();

        for ( CryToxin ct : ctList ) {

            Pattern pp = Pattern.compile( "Cry(\\d+)[A-Z][A-z]\\d*" );
            Matcher mm = pp.matcher( ct.name );
            mm.matches();

            cryPrefixSet.add( "Cry" + mm.group( 1 ) );

        }

        float jump = (float) ( 1.0 / cryPrefixSet.size() );
        float acum = 0;

        Map<String, Color> colorMap = new HashMap<>();
        float[] baseHSB = Color.RGBtoHSB( baseProteinColor.getRed(), baseProteinColor.getGreen(), baseProteinColor.getBlue(), null );

        for ( String prefix : cryPrefixSet ) {
            colorMap.put( prefix, new Color( Color.HSBtoRGB( baseHSB[0] - acum, baseHSB[1], baseHSB[2] ) ) );
            acum += jump;
        }

        for ( CryToxin ct : ctList ) {

            Pattern pp = Pattern.compile( "Cry(\\d+)[A-Z][A-z]\\d*" );
            Matcher mm = pp.matcher( ct.name );
            mm.matches();

            ct.classColor = colorMap.get( "Cry" + mm.group( 1 ) );

        }
        
    }
    private void fillCompleteSequenceTextPane() {
        
        if ( selectedSeq != null && selectedSeq.getGBSeqSequence() != null ) {
            
            areaSeqComp.setText( "" );
            Utils.appendToPane( areaSeqComp, "", Color.BLACK, Color.WHITE );
            
            String sequence = selectedCt.proteinSequence;
            
            CryToxinDomain d1 = selectedCt.getDomain( 1 );
            CryToxinDomain d2 = selectedCt.getDomain( 2 );
            CryToxinDomain d3 = selectedCt.getDomain( 3 );
            
            SequenceInterval prev = new SequenceInterval();
            prev.start = 1;
            prev.end = d1.interval.start - 1;
            
            SequenceInterval d12 = new SequenceInterval();
            d12.start = d1.interval.end + 1;
            d12.end = d2.interval.start - 1;
            
            SequenceInterval d23 = new SequenceInterval();
            d23.start = d2.interval.end + 1;
            d23.end = d3.interval.start - 1;
            
            SequenceInterval end = new SequenceInterval();
            end.start = d3.interval.end + 1;
            end.end = sequence.length();
            
            String content = "";
            int jump = 0;
            int lastNewLineIndex = 0;
            int lastLineLength = 0;
            String spaceInsert = "";
            String lineInsert = "";
            
            Utils.appendToPane( areaSeqComp, Utils.formatProtein( sequence.substring( prev.start - 1, prev.end ) ), Color.BLACK, Color.WHITE );
            
            
            if ( d1.interval.start <= d1.interval.end ) {
                content = areaSeqComp.getText();
                jump = content.length() - Utils.countChar( content, ' ' ) - Utils.countChar( content, '\n' );
                lastNewLineIndex = content.lastIndexOf( '\n' );
                lastLineLength = content.substring( lastNewLineIndex + 1, content.length() ).trim().replaceAll( "[\n]|[ ]", "" ).length();
                spaceInsert = lastLineLength % 10 == 0 && lastLineLength % 60 != 0 && lastLineLength != 0 ? " " : "";
                lineInsert = lastLineLength % 60 == 0 && lastLineLength != 0 ? "\n" : "";

                if ( checkD1.isSelected() ) {
                    Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d1.interval.start - 1, d1.interval.end ), jump ), Color.BLACK, cD1 );
                } else {
                    Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d1.interval.start - 1, d1.interval.end ), jump ), Color.BLACK, Color.WHITE );
                }
            }
            
            
            if ( d12.start <= d12.end ) {
                content = areaSeqComp.getText();
                jump = content.length() - Utils.countChar( content, ' ' ) - Utils.countChar( content, '\n' );
                lastNewLineIndex = content.lastIndexOf( '\n' );
                lastLineLength = content.substring( lastNewLineIndex + 1, content.length() ).trim().replaceAll( "[\n]|[ ]", "" ).length();
                spaceInsert = lastLineLength % 10 == 0 && lastLineLength % 60 != 0 && lastLineLength != 0 ? " " : "";
                lineInsert = lastLineLength % 60 == 0 && lastLineLength != 0 ? "\n" : "";

                Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d12.start - 1, d12.end ), jump ), Color.BLACK, Color.WHITE );
            }
            
            if ( d2.interval.start <= d2.interval.end ) {
                content = areaSeqComp.getText();
                jump = content.length() - Utils.countChar( content, ' ' ) - Utils.countChar( content, '\n' );
                lastNewLineIndex = content.lastIndexOf( '\n' );
                lastLineLength = content.substring( lastNewLineIndex + 1, content.length() ).trim().replaceAll( "[\n]|[ ]", "" ).length();
                spaceInsert = lastLineLength % 10 == 0 && lastLineLength % 60 != 0 && lastLineLength != 0 ? " " : "";
                lineInsert = lastLineLength % 60 == 0 && lastLineLength != 0 ? "\n" : "";

                if ( checkD2.isSelected() ) {
                    Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d2.interval.start - 1, d2.interval.end ), jump ), Color.BLACK, cD2 );
                } else {
                    Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d2.interval.start - 1, d2.interval.end ), jump ), Color.BLACK, Color.WHITE );
                }
            }
            
            if ( d23.start <= d23.end ) {
                content = areaSeqComp.getText();
                jump = content.length() - Utils.countChar( content, ' ' ) - Utils.countChar( content, '\n' );
                lastNewLineIndex = content.lastIndexOf( '\n' );
                lastLineLength = content.substring( lastNewLineIndex + 1, content.length() ).trim().replaceAll( "[\n]|[ ]", "" ).length();
                spaceInsert = lastLineLength % 10 == 0 && lastLineLength % 60 != 0 && lastLineLength != 0 ? " " : "";
                lineInsert = lastLineLength % 60 == 0 && lastLineLength != 0 ? "\n" : "";

                Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d23.start - 1, d23.end ), jump ), Color.BLACK, Color.WHITE );
            }
            
            if ( d3.interval.start <= d3.interval.end ) {
                content = areaSeqComp.getText();
                jump = content.length() - Utils.countChar( content, ' ' ) - Utils.countChar( content, '\n' );
                lastNewLineIndex = content.lastIndexOf( '\n' );
                lastLineLength = content.substring( lastNewLineIndex + 1, content.length() ).trim().replaceAll( "[\n]|[ ]", "" ).length();                
                spaceInsert = lastLineLength % 10 == 0 && lastLineLength % 60 != 0 && lastLineLength != 0 ? " " : "";
                lineInsert = lastLineLength % 60 == 0 && lastLineLength != 0 ? "\n" : "";

                if ( checkD3.isSelected() ) {
                    Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d3.interval.start - 1, d3.interval.end ), jump ), Color.BLACK, cD3 );
                } else {
                    Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( d3.interval.start - 1, d3.interval.end ), jump ), Color.BLACK, Color.WHITE );
                }
            }
            
            if ( end.start <= end.end ) {
                content = areaSeqComp.getText();
                jump = content.length() - Utils.countChar( content, ' ' ) - Utils.countChar( content, '\n' );
                lastNewLineIndex = content.lastIndexOf( '\n' );
                lastLineLength = content.substring( lastNewLineIndex + 1, content.length() ).trim().replaceAll( "[\n]|[ ]", "" ).length();
                spaceInsert = lastLineLength % 10 == 0 && lastLineLength % 60 != 0 && lastLineLength != 0 ? " " : "";
                lineInsert = lastLineLength % 60 == 0 && lastLineLength != 0 ? "\n" : "";

                Utils.appendToPane( areaSeqComp, spaceInsert + lineInsert + Utils.formatProtein( sequence.substring( end.start - 1, end.end ), jump ), Color.BLACK, Color.WHITE );
            }
            
        }
        
    }
    
    private void openDomainXRefLink( JLabel xrefLink ) {
        
        String text = xrefLink.getText();
        
        if ( text.contains( "CDD" ) && Desktop.isDesktopSupported() ) {
                
            try {             
                Desktop.getDesktop().browse( new URI( 
                        String.format( "http://www.ncbi.nlm.nih.gov/Structure/cdd/cddsrv.cgi?uid=%s", 
                                text.replace( "CDD:", "" ) )
                ));
            } catch ( IOException | URISyntaxException exc ) {
                Utils.showExceptionMessage( this, exc );
            }
            
        }
        
    }
    
    private void updateGUI() {
        
        String data = day + "/" + month + "/" + year + " - " + hour + ":" + minute + ":" + second + "hs";
        fieldDataExtr.setText( data );
        fieldQuantExtrBruta.setText( size );
        fieldQuantExtrProc.setText( String.valueOf( ctList.size() ) );
        
    }
    
    private void updateProteinList() {
        
        proteinListModel.setSize( 0 );
        
        for ( CryToxin ct : ctList ) {
            proteinListModel.addElement( ct );
        }
        
    }
    
    private void updateDetails() {
        
        if ( selectedCt != null ) {
            
            selectedSeq = correspondenceTable.get( selectedCt );
            
            fieldNome.setText( selectedCt.name );
            fieldAccNo.setText( selectedCt.accessionNo );
            fieldIdProt.setText( selectedCt.ncbiProtein );
            fieldIdNuc.setText( selectedCt.ncbiNucleotide );
            fieldAut.setText( selectedCt.authors );
            fieldAno.setText( selectedCt.year );
            fieldCepa.setText( selectedCt.sourceStrain );
            linkURLPrin.setText( selectedCt.ncbiURL );
            areaCom.setText( selectedCt.comment );
            
            
            
            fieldLocus.setText( selectedSeq.getGBSeqLocus() );
            fieldComp.setText( selectedSeq.getGBSeqLength() );
            fieldTipo.setText( selectedSeq.getGBSeqMoltype() );
            fieldTopo.setText( selectedSeq.getGBSeqTopology() );
            fieldDivi.setText( selectedSeq.getGBSeqDivision() );
            fieldCri.setText( selectedSeq.getGBSeqCreateDate() );
            fieldDef.setText( selectedSeq.getGBSeqDefinition() );
            fieldAcessPri.setText( selectedSeq.getGBSeqPrimaryAccession() );
            fieldVersaoAcess.setText( selectedSeq.getGBSeqAccessionVersion() );
            fieldFonte.setText( selectedSeq.getGBSeqSource() );
            fieldOrg.setText( selectedSeq.getGBSeqOrganism() );
            fieldTaxo.setText( selectedSeq.getGBSeqTaxonomy() );
            fieldBDF.setText( selectedSeq.getGBSeqSourceDb() );
            
            StringBuilder sbk = new StringBuilder();
            if ( selectedSeq.getGBSeqKeywords() != null ) {
                for ( GBKeyword gk : selectedSeq.getGBSeqKeywords().getGBKeyword() ) {
                    sbk.append( gk.getvalue() ).append( " " );
                }
            }
            
            fieldPChaves.setText( sbk.toString() );
            areaComent.setText( selectedSeq.getGBSeqComment() );
            
            
            
            
            referencesListModel.setSize( 0 );
            
            if ( selectedSeq.getGBSeqReferences() != null && selectedSeq.getGBSeqReferences().getGBReference() != null ) {
                for ( GBReference ref : selectedSeq.getGBSeqReferences().getGBReference() ) {
                    referencesListModel.addElement( ref );
                }
            }
            
            fieldAutRef.setText( "" );
            fieldTitRef.setText( "" );
            fieldJournalRef.setText( "" );
            linkURLPubmedRef.setText( " " );
            
            /*checkD1.setSelected( false );
            checkD2.setSelected( false );
            checkD3.setSelected( false );*/
            
            fillSequenceData();
            
        } else {
            
            fieldNome.setText( "" );
            fieldAccNo.setText( "" );
            fieldIdProt.setText( "" );
            fieldIdNuc.setText( "" );
            fieldAut.setText( "" );
            fieldAno.setText( "" );
            fieldCepa.setText( "" );
            linkURLPrin.setText( " " );
            areaCom.setText( "" );
            
            fieldLocus.setText( "" );
            fieldComp.setText( "" );
            fieldTipo.setText( "" );
            fieldTopo.setText( "" );
            fieldDivi.setText( "" );
            fieldCri.setText( "" );
            fieldDef.setText( "" );
            fieldAcessPri.setText( "" );
            fieldVersaoAcess.setText( "" );
            fieldFonte.setText( "" );
            fieldOrg.setText( "" );
            fieldTaxo.setText( "" );
            fieldBDF.setText( "" );
            fieldPChaves.setText( "" );
            areaComent.setText( "" );
            
            referencesListModel.setSize( 0 );
            fieldAutRef.setText( "" );
            fieldTitRef.setText( "" );
            fieldJournalRef.setText( "" );
            linkURLPubmedRef.setText( " " );
            
            
            areaSeqComp.setText( "" );
            Utils.appendToPane( areaSeqComp, "", Color.BLACK, Color.WHITE );
            fieldIntSeqComp.setText( "" );
            fieldNomeSeqComp.setText( "" );
            areaD1.setText( "" );
            fieldIntD1.setText( "" );
            fieldNomeD1.setText( "" );
            fieldComD1.setText( "" );
            linkXrefD1.setText( "" );
            areaD2.setText( "" );
            fieldIntD2.setText( "" );
            fieldNomeD2.setText( "" );
            fieldComD2.setText( "" );
            linkXrefD2.setText( "" );
            areaD3.setText( "" );
            fieldIntD3.setText( "" );
            fieldNomeD3.setText( "" );
            fieldComD3.setText( "" );
            linkXrefD3.setText( "" );
            
            checkD1.setSelected( false );
            checkD2.setSelected( false );
            checkD3.setSelected( false );
            
        }
        
    }
    
    private void fillSequenceData() {
        
        if ( selectedSeq.getGBSeqSequence() != null ) {
            
            String sequence = selectedCt.proteinSequence;
            
            //areaSeqComp.setText( Utils.formatProtein( sequence ) );
            Utils.setTextToPane( areaSeqComp, Utils.formatProtein( sequence ), Color.BLACK, Color.WHITE );
            fieldIntSeqComp.setText( selectedCt.proteinSequenceInterval );
            fieldNomeSeqComp.setText( selectedCt.proteinSequenceName );
            
            areaD1.setText( Utils.formatProtein( selectedCt.getDomainSequence( 1 ) ) );
            fieldIntD1.setText( selectedCt.getDomainInterval( 1 ) );
            fieldNomeD1.setText( selectedCt.getDomain( 1 ).name );
            fieldComD1.setText( selectedCt.getDomain( 1 ).note );
            linkXrefD1.setText( selectedCt.getDomain( 1 ).xref );
            
            areaD2.setText( Utils.formatProtein( selectedCt.getDomainSequence( 2 ) ) );
            fieldIntD2.setText( selectedCt.getDomainInterval( 2 ) );
            fieldNomeD2.setText( selectedCt.getDomain( 2 ).name );
            fieldComD2.setText( selectedCt.getDomain( 2 ).note );
            linkXrefD2.setText( selectedCt.getDomain( 2 ).xref );
            
            areaD3.setText( Utils.formatProtein( selectedCt.getDomainSequence( 3 ) ) );
            fieldIntD3.setText( selectedCt.getDomainInterval( 3 ) );
            fieldNomeD3.setText( selectedCt.getDomain( 3 ).name );
            fieldComD3.setText( selectedCt.getDomain( 3 ).note );
            linkXrefD3.setText( selectedCt.getDomain( 3 ).xref );
            
            if ( checkD1.isSelected() || checkD2.isSelected() || checkD3.isSelected() ) {
                fillCompleteSequenceTextPane();
            }
            
        }
        
    }
    
    /**
     * Task to perform extraction (provides thread safety in Swing)
     */
    private class ExtractionTask implements Runnable {
        
        JFrame frame;
        
        ExtractionTask( JFrame frame ) {
            this.frame = frame;
        }
        
        @Override
        public void run() {

            try {
                
                btnExtrairProteinas.setEnabled( false );
                btnCarregarProteinas.setEnabled( false );
                btnAlinhamento.setEnabled( false );
                lblAguarde.setText( "Aguarde..." );
                
                Date d = new Date();

                // getting data from BtNomenclature
                ctList = Utils.getCryToxinList();

                String cryDataFilePath = "temp/cryData";
                String sequenceDataFilePath = "temp/sequenceData";

                String dataFileSufix = String.format( "-%tY-%tm-%td-(%tH-%tM-%tS)-size=%d.xml", 
                        d, d, d, d, d, d, ctList.size() );

                cryDataFilePath += dataFileSufix;
                sequenceDataFilePath += dataFileSufix;

                File cryDataFile = new File( cryDataFilePath );
                File sequenceDataFile = new File( sequenceDataFilePath );

                // serializing cry data from BtNomenclature
                CryToxinSet ctSet = new CryToxinSet();
                ctSet.cryToxins = ctList;

                Serializer ser = new Persister();
                ser.write( ctSet, cryDataFile );



                // getting and serializing data from NCBI
                StringBuilder sbIds = new StringBuilder();

                for ( CryToxin ct : ctList ) {    
                    sbIds.append( ct.ncbiProtein ).append( "," );
                }

                String ids = sbIds.toString();

                String completeData = Utils.getDataFromRequestViaPost( 
                        "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi", 
                        "tool=crygetter&email=davidbuzatto@ifsp.edu.br&db=protein&retmode=xml&id=" + ids.substring( 0, ids.length() - 1 ) );

                try ( FileWriter fw = new FileWriter( sequenceDataFile ) ) {
                    fw.write( completeData );
                }




                // saving the files with zip
                JFileChooser jfc = new JFileChooser();
                FileNameExtensionFilter fnef = new FileNameExtensionFilter( 
                        "CryGetter Extraction (*.cgext)", "cgext" );

                for ( FileFilter f : jfc.getChoosableFileFilters() ) {
                    jfc.removeChoosableFileFilter( f );
                }

                jfc.setFileFilter( fnef );
                jfc.setDialogTitle( "Salvar Dados Extraídos" );
                jfc.setFileSelectionMode( JFileChooser.FILES_ONLY );
                jfc.setMultiSelectionEnabled( false );

                if ( jfc.showSaveDialog( frame ) == JFileChooser.APPROVE_OPTION ) {

                    File f = jfc.getSelectedFile();

                    if ( f.getName().lastIndexOf( ".cgext" ) == -1 ) {
                        f = new File( f.getAbsolutePath() + ".cgext" );
                    }

                    if ( !f.exists() || 
                            ( f.exists() && JOptionPane.showConfirmDialog( 
                              frame, "O arquivo já existe. Deseja sobrescrevê-lo?", "Aviso", 
                              JOptionPane.OK_CANCEL_OPTION ) == JOptionPane.OK_OPTION ) ) {

                        Utils.zip( f, cryDataFile, sequenceDataFile );

                    }

                }

                // deleting generated files
                cryDataFile.delete();
                sequenceDataFile.delete();


            } catch ( Exception exc ) {
                Utils.showExceptionMessage( frame, exc );
            } finally {
                btnExtrairProteinas.setEnabled( true );
                btnCarregarProteinas.setEnabled( true );
                btnAlinhamento.setEnabled( true );
                lblAguarde.setText( " " );
            }

        }
        
    }
    
    /**
     * Task to perform package loading extraction (provides thread safety in Swing)
     */
    private class LoadTask implements Runnable {

        JFrame frame;
        File fileToOpen;
        
        LoadTask( JFrame frame, File fileToOpen ) {
            this.frame = frame;
            this.fileToOpen = fileToOpen;
        }
        
        @Override
        public void run() {
            
            try {
                
                btnExtrairProteinas.setEnabled( false );
                btnCarregarProteinas.setEnabled( false );
                btnAlinhamento.setEnabled( false );
                lblAguarde.setText( "Aguarde..." );
                
                selectedCt = null;
                selectedSeq = null;
                updateDetails();
                
                // processing
                List<File> unzippedFiles = Utils.unzip( fileToOpen );
                String name = "";
                GBSet gb = null;
                List<CryToxin> ctl = null;
                
                ctList = new ArrayList<>();
                gbSeqList = new ArrayList<>();
                correspondenceTable = new LinkedHashMap<>();
                
                // processing unzipped files and loading
                // raw data
                for ( File f : unzippedFiles ) {
                    
                    name = f.getName();
                    
                    if ( name.startsWith( "sequenceData" ) ) {
                        gb = Utils.getGBSet( f );
                    } else if ( name.startsWith( "cryData" ) ) {
                        Serializer serializer = new Persister();
                        CryToxinSet ctSet = serializer.read( CryToxinSet.class, f );
                        ctl = ctSet.cryToxins;
                    }
                    
                    f.delete();
                    
                }
                
                // extrating date and time data from file name
                Pattern p = Pattern.compile( "(\\d{4})-(\\d{2})-(\\d{2})-[(](\\d{2})-(\\d{2})-(\\d{2})[)]-size=(\\d+)[.]xml" );
                
                name = name.replace( "cryData-", "" ).replace( "sequenceData-", "" );
                Matcher m = p.matcher( name );
                
                if ( m.matches() ) {
                    year = m.group(1);
                    month = m.group(2);
                    day = m.group(3);
                    hour = m.group(4);
                    minute = m.group(5);
                    second = m.group(6);
                    size = m.group(7);
                }
                
                // removing duplicates
                // the duplicate test used is the equality between acession numbers
                // from cry toxin list and primary acession from NCBI data.
                // accept only proteins with the correct nomenclature (Cry\d+\w{2}\d+)
                Map<String, String> noDuplicatesMap = new HashMap<>();
                
                for ( CryToxin ct : ctl ) {
                    
                    for ( GBSeq seq : gb.getGBSeq() ) {
                        if ( ct.accessionNo.equals( seq.getGBSeqPrimaryAccession() ) ) {
                            if ( !noDuplicatesMap.containsKey( ct.accessionNo ) &&
                                    ct.name.matches( "Cry\\d+[A-Z][a-z]\\d*" ) ) {
                                correspondenceTable.put( ct, seq );
                            }
                        }
                    }
                    
                }
                
                // processing domains and removing proteins that does not have 3 domains
                List<CryToxin> toxinsToRemove = new ArrayList<>();
                
                for ( Entry<CryToxin, GBSeq> e : correspondenceTable.entrySet() ) {
                    
                    int cDom = 0;
                    CryToxin ct = e.getKey();
                    
                    for ( GBFeature feat : e.getValue().getGBSeqFeatureTable().getGBFeature() ) {
                        
                        if ( feat.getGBFeatureKey().equalsIgnoreCase( "protein" ) ) {
                            
                            ct.proteinSequenceInterval = feat.getGBFeatureLocation();
                            
                            for ( GBQualifier q : feat.getGBFeatureQuals().getGBQualifier() ) {
                                if ( q.getGBQualifierName().equalsIgnoreCase( "name" ) ) {
                                    ct.proteinSequenceName = q.getGBQualifierValue();
                                }
                            }
                            
                        } else if ( feat.getGBFeatureKey().equalsIgnoreCase( "region" ) ) {
                            
                            if ( cDom < 3 ) {  // guarantee
                                
                                String[] pInt = feat.getGBFeatureLocation().split( "[.][.]" );
                                CryToxinDomain domain = new CryToxinDomain();
                                SequenceInterval seqInt = new SequenceInterval();
                                domain.interval = seqInt;
                                
                                for ( GBQualifier q : feat.getGBFeatureQuals().getGBQualifier() ) {
                                    if ( q.getGBQualifierName().equalsIgnoreCase( "region_name" ) ) {
                                        domain.name = q.getGBQualifierValue();
                                    } else if ( q.getGBQualifierName().equalsIgnoreCase( "note" ) ) {
                                        domain.note = q.getGBQualifierValue();
                                    } else if ( q.getGBQualifierName().equalsIgnoreCase( "db_xref" ) ) {
                                        domain.xref = q.getGBQualifierValue();
                                    } 
                                }
                                
                                try {
                                    
                                    seqInt.start = Integer.parseInt( pInt[0] );
                                    seqInt.end = Integer.parseInt( pInt[1] );
                                    
                                    ct.domains.add( domain );
                                    cDom++;
                                    
                                } catch ( NumberFormatException exc ) {
                                    // malformed domain
                                }

                            }

                        }

                    }
                    
                    if ( cDom != 3 ) {
                        toxinsToRemove.add( ct );
                    }
                    
                }
                
                // removind toxins with domain count different from 3
                for ( CryToxin ct : toxinsToRemove ) {
                    correspondenceTable.remove( ct );
                }
                
                // populating the lists of cry toxins and gbseqs
                // and setting the proteinSequence from gbseq to cry toxin
                for ( Entry<CryToxin, GBSeq> e : correspondenceTable.entrySet() ) {
                    e.getKey().proteinSequence = e.getValue().getGBSeqSequence().toUpperCase();
                    ctList.add( e.getKey() );
                    gbSeqList.add( e.getValue() );
                }
                
                updateProteinColors();
                updateGUI();
                updateProteinList();
                
            } catch ( Exception exc ) {
                Utils.showExceptionMessage( frame, exc );
            } finally {
                btnExtrairProteinas.setEnabled( true );
                btnCarregarProteinas.setEnabled( true );
                btnAlinhamento.setEnabled( true );
                lblAguarde.setText( " " );
            }
            
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main( String args[] ) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() ) {
                if ( "Nimbus".equals( info.getName() ) ) {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        } catch ( ClassNotFoundException ex ) {
            java.util.logging.Logger.getLogger( MainWindow.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch ( InstantiationException ex ) {
            java.util.logging.Logger.getLogger( MainWindow.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch ( IllegalAccessException ex ) {
            java.util.logging.Logger.getLogger( MainWindow.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch ( javax.swing.UnsupportedLookAndFeelException ex ) {
            java.util.logging.Logger.getLogger( MainWindow.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable() {
            public void run() {
                new MainWindow().setVisible( true );
            }
        } );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane abasDetalhes;
    private javax.swing.JTabbedPane abasDetalhesNCBI;
    private javax.swing.JTabbedPane abasSequenciasNCBI;
    private javax.swing.JTextArea areaCom;
    private javax.swing.JTextArea areaComent;
    private javax.swing.JTextArea areaD1;
    private javax.swing.JTextArea areaD2;
    private javax.swing.JTextArea areaD3;
    private javax.swing.JTextPane areaSeqComp;
    private javax.swing.JButton btnAlinhamento;
    private javax.swing.JButton btnCarregarProteinas;
    private javax.swing.JButton btnCor;
    private javax.swing.JButton btnExtrairProteinas;
    private javax.swing.JButton btnSobreProc;
    private javax.swing.JCheckBox checkD1;
    private javax.swing.JCheckBox checkD2;
    private javax.swing.JCheckBox checkD3;
    private javax.swing.JTextField fieldAccNo;
    private javax.swing.JTextField fieldAcessPri;
    private javax.swing.JTextField fieldAno;
    private javax.swing.JTextField fieldAut;
    private javax.swing.JTextField fieldAutRef;
    private javax.swing.JTextField fieldBDF;
    private javax.swing.JTextField fieldCepa;
    private javax.swing.JTextField fieldComD1;
    private javax.swing.JTextField fieldComD2;
    private javax.swing.JTextField fieldComD3;
    private javax.swing.JTextField fieldComp;
    private javax.swing.JTextField fieldCri;
    private javax.swing.JTextField fieldDataExtr;
    private javax.swing.JTextField fieldDef;
    private javax.swing.JTextField fieldDivi;
    private javax.swing.JTextField fieldFonte;
    private javax.swing.JTextField fieldIdNuc;
    private javax.swing.JTextField fieldIdProt;
    private javax.swing.JTextField fieldIntD1;
    private javax.swing.JTextField fieldIntD2;
    private javax.swing.JTextField fieldIntD3;
    private javax.swing.JTextField fieldIntSeqComp;
    private javax.swing.JTextField fieldJournalRef;
    private javax.swing.JTextField fieldLocus;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JTextField fieldNomeD1;
    private javax.swing.JTextField fieldNomeD2;
    private javax.swing.JTextField fieldNomeD3;
    private javax.swing.JTextField fieldNomeSeqComp;
    private javax.swing.JTextField fieldOrg;
    private javax.swing.JTextField fieldPChaves;
    private javax.swing.JTextField fieldQuantExtrBruta;
    private javax.swing.JTextField fieldQuantExtrProc;
    private javax.swing.JTextField fieldTaxo;
    private javax.swing.JTextField fieldTipo;
    private javax.swing.JTextField fieldTitRef;
    private javax.swing.JTextField fieldTopo;
    private javax.swing.JTextField fieldVersaoAcess;
    private javax.swing.JLabel labelDataExtr;
    private javax.swing.JLabel labelQuantExtrBruta;
    private javax.swing.JLabel labelQuantExtrProc;
    private javax.swing.JLabel lblAccNo;
    private javax.swing.JLabel lblAcessPri;
    private javax.swing.JLabel lblAguarde;
    private javax.swing.JLabel lblAno;
    private javax.swing.JLabel lblAut;
    private javax.swing.JLabel lblAutRef;
    private javax.swing.JLabel lblBDF;
    private javax.swing.JLabel lblCepa;
    private javax.swing.JLabel lblCom;
    private javax.swing.JLabel lblComD1;
    private javax.swing.JLabel lblComD2;
    private javax.swing.JLabel lblComD3;
    private javax.swing.JLabel lblComent;
    private javax.swing.JLabel lblComp;
    private javax.swing.JLabel lblCri;
    private javax.swing.JLabel lblDef;
    private javax.swing.JLabel lblDivi;
    private javax.swing.JLabel lblFonte;
    private javax.swing.JLabel lblIdNuc;
    private javax.swing.JLabel lblIdProt;
    private javax.swing.JLabel lblIntD1;
    private javax.swing.JLabel lblIntD2;
    private javax.swing.JLabel lblIntD3;
    private javax.swing.JLabel lblIntSeqComp;
    private javax.swing.JLabel lblJournalRef;
    private javax.swing.JLabel lblLocus;
    private javax.swing.JLabel lblNamoD1;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNomeD2;
    private javax.swing.JLabel lblNomeSeqComp;
    private javax.swing.JLabel lblOrg;
    private javax.swing.JLabel lblPChaves;
    private javax.swing.JLabel lblTaxo;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblTitRef;
    private javax.swing.JLabel lblTopo;
    private javax.swing.JLabel lblURLPrin;
    private javax.swing.JLabel lblURLPubmedRef;
    private javax.swing.JLabel lblVersaoAcess;
    private javax.swing.JLabel lblXrefD1;
    private javax.swing.JLabel lblXrefD2;
    private javax.swing.JLabel lblXrefD3;
    private javax.swing.JLabel ldlNomeD3;
    private javax.swing.JLabel linkURLPrin;
    private javax.swing.JLabel linkURLPubmedRef;
    private javax.swing.JLabel linkXrefD1;
    private javax.swing.JLabel linkXrefD2;
    private javax.swing.JLabel linkXrefD3;
    private javax.swing.JList<CryToxin> listaProteinas;
    private javax.swing.JList listaRef;
    private javax.swing.JPanel painelConf;
    private javax.swing.JPanel painelD1;
    private javax.swing.JPanel painelD2;
    private javax.swing.JPanel painelD3;
    private javax.swing.JPanel painelDadosBt;
    private javax.swing.JPanel painelDadosExtr;
    private javax.swing.JPanel painelDetalhes;
    private javax.swing.JPanel painelDetalhesRef;
    private javax.swing.JPanel painelListaRef;
    private javax.swing.JPanel painelNCBI;
    private javax.swing.JPanel painelPrincip01;
    private javax.swing.JPanel painelPrincip02;
    private javax.swing.JPanel painelPrincipalNCBI;
    private javax.swing.JPanel painelProteinas;
    private javax.swing.JPanel painelReferenciasNCBI;
    private javax.swing.JPanel painelSequenciaCompleta;
    private javax.swing.JPanel painelSequenciasNCBI;
    private javax.swing.JScrollPane scrollProteinas;
    private javax.swing.JScrollPane spCom;
    private javax.swing.JScrollPane spComent;
    private javax.swing.JScrollPane spD1;
    private javax.swing.JScrollPane spD2;
    private javax.swing.JScrollPane spD3;
    private javax.swing.JScrollPane spListaRef;
    private javax.swing.JScrollPane spSeqComp;
    // End of variables declaration//GEN-END:variables
}
